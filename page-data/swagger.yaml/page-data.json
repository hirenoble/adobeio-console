{"componentChunkName":"component---src-templates-openapi-template-js","path":"/swagger.yaml","result":{"pageContext":{"spec":{"swagger":"2.0","info":{"title":"Transporter API","version":"1.0","description":"This is the API layer for Adobe Developer Console."},"tags":[{"name":"Projects","description":"APIs for Console Projects"},{"name":"Workspaces","description":"APIs for Console Workspaces"},{"name":"AppRegistry","description":"APIs for Exchange AppRegistry"},{"name":"Organizations","description":"APIs for Organizations"},{"name":"Atlas Policy Engine","description":"APIs for Atlas Policy Engine"}],"paths":{"/api/organizations/{orgId}/projects/{projectId}/workspaces/{workspaceId}/download":{"get":{"summary":"Download workspace as a JSON file","tags":["Workspaces"],"parameters":[{"$ref":"#/parameters/orgId"},{"$ref":"#/parameters/projectId"},{"$ref":"#/parameters/workspaceId"},{"$ref":"#/parameters/authorization"},{"$ref":"#/parameters/x-api-key"}],"responses":{"200":{"description":"Download workspace JSON file","schema":{"type":"object","properties":{"project":{"type":"object","description":"Root element","properties":{"id":{"type":"string","description":"Project id"},"name":{"type":"string","description":"Project name"},"title":{"type":"string","description":"Project title"},"description":{"type":"string","description":"Project description"},"org":{"type":"object","description":"Organization info","properties":{"id":{"type":"string","description":"Organization id"},"name":{"type":"string","description":"Organization name"},"ims_org_id":{"type":"string","description":"Ims organization id"},"workspace":{"type":"object","description":"Workspace info","properties":{"id":{"type":"string","description":"Workspace id"},"name":{"type":"string","description":"Workspace name"},"title":{"type":"string","description":"Workspace title"},"description":{"type":"string","description":"Workspace description"},"details":{"type":"object","description":"Workspace details","properties":{"credentials":{"type":"array","items":{"type":"object","properties":{"id":{"type":"string","description":"Credential id"},"name":{"type":"string","description":"Credential name"},"integration_type":{"type":"string","description":"Credential type, possible values (service, oauthweb, oauthandroid, oauthios)"},"jwt":{"type":"object","description":"jwt credential details","properties":{"client_id":{"type":"string","description":"Client id"},"client_secret":{"type":"string","description":"Client secret"},"techacct":{"type":"string","description":"Technical account id"},"meta_scopes":{"type":"array","items":{"type":"string","description":"Credential meta scope"}}}},"oauth2":{"type":"object","description":"oauth2 credential details","properties":{"client_id":{"type":"string","description":"Client id"},"client_secret":{"type":"string","description":"Client secret"},"redirect_uri":{"type":"array","description":"Redirect urls list","items":{"type":"string","description":"Redirect url"}}}}}}},"services":{"type":"array","description":"Workspace services","items":{"type":"object","description":"Service details","properties":{"code":{"type":"string","description":"Service code"},"name":{"type":"string","description":"Service name"}}}},"runtime":{"type":"object","description":"Workspace runtime","properties":{"namespaces":{"type":"array","description":"Runtime namespaces","items":{"type":"object","description":"Runtime details","properties":{"name":{"type":"string","description":"Namespace name"},"auth":{"type":"string","description":"Namespace auth token"}}}}}}}}}}}}}}}}},"500":{"description":"Export workspace error"}},"x-code-samples":[{"lang":"shell","source":"curl --request GET \\\n  --url http://undefinedundefined/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/download"},{"lang":"node","source":"var request = require(\"request\");\n\nvar options = {\n  method: 'GET',\n  url: 'http://undefinedundefined/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/download'\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"},{"lang":"php","source":"<?php\n\n$request = new HttpRequest();\n$request->setUrl('http://undefinedundefined/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/download');\n$request->setMethod(HTTP_METH_GET);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"},{"lang":"java","source":"HttpResponse<String> response = Unirest.get(\"http://undefinedundefined/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/download\")\n  .asString();"},{"lang":"go","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"http://undefinedundefined/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/download\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"python","source":"import http.client\n\nconn = http.client.HTTPConnection(\"undefinedundefined\")\n\nconn.request(\"GET\", \"/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/download\")\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"csharp","source":"var client = new RestClient(\"http://undefinedundefined/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/download\");\nvar request = new RestRequest(Method.GET);\nIRestResponse response = client.Execute(request);"},{"lang":"ruby","source":"require 'uri'\nrequire 'net/http'\n\nurl = URI(\"http://undefinedundefined/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/download\")\n\nhttp = Net::HTTP.new(url.host, url.port)\n\nrequest = Net::HTTP::Get.new(url)\n\nresponse = http.request(request)\nputs response.read_body"}]}},"/api/organizations/{orgId}/apps/{appName}/validate":{"get":{"summary":"Validate application name","tags":["AppRegistry"],"parameters":[{"$ref":"#/parameters/orgId"},{"$ref":"#/parameters/appName"},{"$ref":"#/parameters/appType"},{"$ref":"#/parameters/authorization"}],"responses":{"200":{"description":"Returns a boolean value representing whether or not the application name is valid.","schema":{"type":"boolean","example":true}},"400":{"description":"Bad Request"},"401":{"description":"Unauthorized"},"403":{"description":"Forbidden"},"404":{"description":"Not Found"},"500":{"description":"Internal Server Error"}},"x-code-samples":[{"lang":"shell","source":"curl --request GET \\\n  --url 'http://undefinedundefined/api/organizations/%7BorgId%7D/apps/%7BappName%7D/validate?appType=SOME_STRING_VALUE'"},{"lang":"node","source":"var request = require(\"request\");\n\nvar options = {\n  method: 'GET',\n  url: 'http://undefinedundefined/api/organizations/%7BorgId%7D/apps/%7BappName%7D/validate',\n  qs: {appType: 'SOME_STRING_VALUE'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"},{"lang":"php","source":"<?php\n\n$request = new HttpRequest();\n$request->setUrl('http://undefinedundefined/api/organizations/%7BorgId%7D/apps/%7BappName%7D/validate');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setQueryData(array(\n  'appType' => 'SOME_STRING_VALUE'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"},{"lang":"java","source":"HttpResponse<String> response = Unirest.get(\"http://undefinedundefined/api/organizations/%7BorgId%7D/apps/%7BappName%7D/validate?appType=SOME_STRING_VALUE\")\n  .asString();"},{"lang":"go","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"http://undefinedundefined/api/organizations/%7BorgId%7D/apps/%7BappName%7D/validate?appType=SOME_STRING_VALUE\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"python","source":"import http.client\n\nconn = http.client.HTTPConnection(\"undefinedundefined\")\n\nconn.request(\"GET\", \"/api/organizations/%7BorgId%7D/apps/%7BappName%7D/validate?appType=SOME_STRING_VALUE\")\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"csharp","source":"var client = new RestClient(\"http://undefinedundefined/api/organizations/%7BorgId%7D/apps/%7BappName%7D/validate?appType=SOME_STRING_VALUE\");\nvar request = new RestRequest(Method.GET);\nIRestResponse response = client.Execute(request);"},{"lang":"ruby","source":"require 'uri'\nrequire 'net/http'\n\nurl = URI(\"http://undefinedundefined/api/organizations/%7BorgId%7D/apps/%7BappName%7D/validate?appType=SOME_STRING_VALUE\")\n\nhttp = Net::HTTP.new(url.host, url.port)\n\nrequest = Net::HTTP::Get.new(url)\n\nresponse = http.request(request)\nputs response.read_body"}]}},"/api/organizations/{orgId}/apps/{appId}":{"get":{"summary":"View an application by its ID","tags":["AppRegistry"],"parameters":[{"$ref":"#/parameters/orgId"},{"$ref":"#/parameters/appId"},{"$ref":"#/parameters/appType"},{"$ref":"#/parameters/authorization"}],"responses":{"200":{"description":"OK","schema":{"type":"object","properties":{"appId":{"type":"string","description":"application id"},"appType":{"type":"string","description":"application type - use JGR for Jaeger apps"},"created":{"type":"object","description":"activity log for application created","properties":{"by":{"type":"object","properties":{"guid":{"type":"string","description":"user guid"}}},"on":{"type":"string","description":"created timestamp"}}},"description":{"type":"string","description":"application description"},"icon":{"type":"string","description":"URL for the icon"},"images":{"type":"object","properties":{"featuredImage1":{"type":"string"},"featuredImage2":{"type":"string"},"featuredImage3":{"type":"string"},"featuredImage4":{"type":"string"},"featuredImage5":{"type":"string"}}},"lastModified":{"type":"object","description":"activity log for application last modified","properties":{"by":{"type":"object","properties":{"guid":{"type":"string","description":"user guid"}}},"on":{"type":"string","description":"last modified timestamp"}}},"name":{"type":"string","description":"application name"},"reviewed":{"type":"object","description":"activity log for application reviewed","properties":{"by":{"type":"object","properties":{"guid":{"type":"string","description":"user guid"}}},"on":{"type":"string","description":"reviewed timestamp"},"notes":{"type":"string","description":"reviewer notes"}}},"status":{"type":"string","description":"application status"},"submitted":{"type":"object","description":"activity log for application submitted","properties":{"by":{"type":"object","properties":{"guid":{"type":"string","description":"user guid"}}},"on":{"type":"string","description":"submitted timestamp"},"notes":{"type":"string","description":"submitter notes"}}},"support":{"type":"object","description":"support information for the application","properties":{"email":{"type":"string"},"contact":{"type":"string"},"website":{"type":"string"}}},"title":{"type":"string"},"workspaces":{"type":"array","description":"list of workspaces in the application","items":{"type":"object","properties":{"id":{"type":"string","description":"workspace id"},"name":{"type":"string","description":"workspace name"},"endPoint":{"type":"string"},"deepLink":{"type":"string"},"shellProps":{"type":"string"},"releaseNotes":{"type":"string"},"whitelist":{"type":"object","description":"list of whitelisted users & orgs","properties":{"users":{"type":"array","items":{"type":"object","properties":{"guid":{"type":"string"}}}},"orgs":{"type":"array","items":{"type":"object","properties":{"orgId":{"type":"string"},"orgName":{"type":"string"}}}}}}}}}}}},"400":{"description":"Bad Request"},"401":{"description":"Unauthorized"},"403":{"description":"Forbidden"},"404":{"description":"Not Found"},"500":{"description":"Internal Server Error"}},"x-code-samples":[{"lang":"shell","source":"curl --request GET \\\n  --url 'http://undefinedundefined/api/organizations/%7BorgId%7D/apps/%7BappId%7D?appType=SOME_STRING_VALUE'"},{"lang":"node","source":"var request = require(\"request\");\n\nvar options = {\n  method: 'GET',\n  url: 'http://undefinedundefined/api/organizations/%7BorgId%7D/apps/%7BappId%7D',\n  qs: {appType: 'SOME_STRING_VALUE'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"},{"lang":"php","source":"<?php\n\n$request = new HttpRequest();\n$request->setUrl('http://undefinedundefined/api/organizations/%7BorgId%7D/apps/%7BappId%7D');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setQueryData(array(\n  'appType' => 'SOME_STRING_VALUE'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"},{"lang":"java","source":"HttpResponse<String> response = Unirest.get(\"http://undefinedundefined/api/organizations/%7BorgId%7D/apps/%7BappId%7D?appType=SOME_STRING_VALUE\")\n  .asString();"},{"lang":"go","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"http://undefinedundefined/api/organizations/%7BorgId%7D/apps/%7BappId%7D?appType=SOME_STRING_VALUE\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"python","source":"import http.client\n\nconn = http.client.HTTPConnection(\"undefinedundefined\")\n\nconn.request(\"GET\", \"/api/organizations/%7BorgId%7D/apps/%7BappId%7D?appType=SOME_STRING_VALUE\")\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"csharp","source":"var client = new RestClient(\"http://undefinedundefined/api/organizations/%7BorgId%7D/apps/%7BappId%7D?appType=SOME_STRING_VALUE\");\nvar request = new RestRequest(Method.GET);\nIRestResponse response = client.Execute(request);"},{"lang":"ruby","source":"require 'uri'\nrequire 'net/http'\n\nurl = URI(\"http://undefinedundefined/api/organizations/%7BorgId%7D/apps/%7BappId%7D?appType=SOME_STRING_VALUE\")\n\nhttp = Net::HTTP.new(url.host, url.port)\n\nrequest = Net::HTTP::Get.new(url)\n\nresponse = http.request(request)\nputs response.read_body"}]},"patch":{"summary":"Update an application","tags":["AppRegistry"],"parameters":[{"$ref":"#/parameters/orgId"},{"$ref":"#/parameters/appId"},{"$ref":"#/parameters/authorization"},{"name":"body","in":"body","required":true,"description":"Application","schema":{"type":"object","properties":{"appId":{"type":"string","description":"application id"},"appType":{"type":"string","description":"application type - use JGR for Jaeger apps"},"created":{"type":"object","description":"activity log for application created","properties":{"guid":{"type":"string","description":"user guid"},"on":{"type":"string","description":"created timestamp"}}},"description":{"type":"string","description":"application description"},"icon":{"type":"string","description":"url for the icon"},"images":{"type":"object","properties":{"featuredImage1":{"type":"string"},"featuredImage2":{"type":"string"},"featuredImage3":{"type":"string"},"featuredImage4":{"type":"string"},"featuredImage5":{"type":"string"}}},"lastModified":{"type":"object","description":"activity log for application last modified","properties":{"by":{"type":"object","properties":{"guid":{"type":"string","description":"user guid"}}},"on":{"type":"string","description":"last modified timestamp"}}},"name":{"type":"string","description":"application name"},"reviewed":{"type":"object","description":"activity log for application reviewed","properties":{"by":{"type":"object","properties":{"guid":{"type":"string","description":"user guid"}}},"on":{"type":"string","description":"reviewed timestamp"},"notes":{"type":"string","description":"reviewer notes"}}},"status":{"type":"string","description":"application status"},"submitted":{"type":"object","description":"activity log for application submitted","properties":{"by":{"type":"object","properties":{"guid":{"type":"string","description":"user guid"}}},"on":{"type":"string","description":"submitted timestamp"},"notes":{"type":"string","description":"submitter notes"}}},"support":{"type":"object","description":"support information for the application","properties":{"email":{"type":"string"},"contact":{"type":"string"},"website":{"type":"string"}}},"title":{"type":"string"},"workspaces":{"type":"array","description":"list of workspaces in the application","items":{"type":"object","properties":{"id":{"type":"string","description":"workspace id"},"name":{"type":"string","description":"workspace name"},"endPoint":{"type":"string"},"deepLink":{"type":"string"},"shellProps":{"type":"string"},"releaseNotes":{"type":"string"},"whitelist":{"type":"object","description":"list of whitelisted users & orgs","properties":{"users":{"type":"array","items":{"type":"object","properties":{"guid":{"type":"string"}}}},"orgs":{"type":"array","items":{"type":"object","properties":{"orgId":{"type":"string"},"orgName":{"type":"string"}}}}}}}}}}}}],"responses":{"200":{"description":"Application Updated Successfully","schema":{"type":"object","properties":{"appId":{"type":"string","description":"application id"},"appType":{"type":"string","description":"application type - use JGR for Jaeger apps"},"created":{"type":"object","description":"activity log for application created","properties":{"by":{"type":"object","properties":{"guid":{"type":"string","description":"user guid"}}},"on":{"type":"string","description":"created timestamp"}}},"description":{"type":"string","description":"application description"},"icon":{"type":"string","description":"URL for the icon"},"images":{"type":"object","properties":{"featuredImage1":{"type":"string"},"featuredImage2":{"type":"string"},"featuredImage3":{"type":"string"},"featuredImage4":{"type":"string"},"featuredImage5":{"type":"string"}}},"lastModified":{"type":"object","description":"activity log for application last modified","properties":{"by":{"type":"object","properties":{"guid":{"type":"string","description":"user guid"}}},"on":{"type":"string","description":"last modified timestamp"}}},"name":{"type":"string","description":"application name"},"reviewed":{"type":"object","description":"activity log for application reviewed","properties":{"by":{"type":"object","properties":{"guid":{"type":"string","description":"user guid"}}},"on":{"type":"string","description":"reviewed timestamp"},"notes":{"type":"string","description":"reviewer notes"}}},"status":{"type":"string","description":"application status"},"submitted":{"type":"object","description":"activity log for application submitted","properties":{"by":{"type":"object","properties":{"guid":{"type":"string","description":"user guid"}}},"on":{"type":"string","description":"submitted timestamp"},"notes":{"type":"string","description":"submitter notes"}}},"support":{"type":"object","description":"support information for the application","properties":{"email":{"type":"string"},"contact":{"type":"string"},"website":{"type":"string"}}},"title":{"type":"string"},"workspaces":{"type":"array","description":"list of workspaces in the application","items":{"type":"object","properties":{"id":{"type":"string","description":"workspace id"},"name":{"type":"string","description":"workspace name"},"endPoint":{"type":"string"},"deepLink":{"type":"string"},"shellProps":{"type":"string"},"releaseNotes":{"type":"string"},"whitelist":{"type":"object","description":"list of whitelisted users & orgs","properties":{"users":{"type":"array","items":{"type":"object","properties":{"guid":{"type":"string"}}}},"orgs":{"type":"array","items":{"type":"object","properties":{"orgId":{"type":"string"},"orgName":{"type":"string"}}}}}}}}}}}},"400":{"description":"Bad Request"},"401":{"description":"Unauthorized"},"403":{"description":"Forbidden"},"404":{"description":"Not Found"},"500":{"description":"Internal Server Error"}},"x-code-samples":[{"lang":"shell","source":"curl --request PATCH \\\n  --url http://undefinedundefined/api/organizations/%7BorgId%7D/apps/%7BappId%7D \\\n  --data '{\"appId\":\"string\",\"appType\":\"string\",\"created\":{\"guid\":\"string\",\"on\":\"string\"},\"description\":\"string\",\"icon\":\"string\",\"images\":{\"featuredImage1\":\"string\",\"featuredImage2\":\"string\",\"featuredImage3\":\"string\",\"featuredImage4\":\"string\",\"featuredImage5\":\"string\"},\"lastModified\":{\"by\":{\"guid\":\"string\"},\"on\":\"string\"},\"name\":\"string\",\"reviewed\":{\"by\":{\"guid\":\"string\"},\"on\":\"string\",\"notes\":\"string\"},\"status\":\"string\",\"submitted\":{\"by\":{\"guid\":\"string\"},\"on\":\"string\",\"notes\":\"string\"},\"support\":{\"email\":\"string\",\"contact\":\"string\",\"website\":\"string\"},\"title\":\"string\",\"workspaces\":[{\"id\":\"string\",\"name\":\"string\",\"endPoint\":\"string\",\"deepLink\":\"string\",\"shellProps\":\"string\",\"releaseNotes\":\"string\",\"whitelist\":{\"users\":[{\"guid\":\"string\"}],\"orgs\":[{\"orgId\":\"string\",\"orgName\":\"string\"}]}}]}'"},{"lang":"node","source":"var request = require(\"request\");\n\nvar options = {\n  method: 'PATCH',\n  url: 'http://undefinedundefined/api/organizations/%7BorgId%7D/apps/%7BappId%7D',\n  body: {\n    appId: 'string',\n    appType: 'string',\n    created: {guid: 'string', on: 'string'},\n    description: 'string',\n    icon: 'string',\n    images: {\n      featuredImage1: 'string',\n      featuredImage2: 'string',\n      featuredImage3: 'string',\n      featuredImage4: 'string',\n      featuredImage5: 'string'\n    },\n    lastModified: {by: {guid: 'string'}, on: 'string'},\n    name: 'string',\n    reviewed: {by: {guid: 'string'}, on: 'string', notes: 'string'},\n    status: 'string',\n    submitted: {by: {guid: 'string'}, on: 'string', notes: 'string'},\n    support: {email: 'string', contact: 'string', website: 'string'},\n    title: 'string',\n    workspaces: [\n      {\n        id: 'string',\n        name: 'string',\n        endPoint: 'string',\n        deepLink: 'string',\n        shellProps: 'string',\n        releaseNotes: 'string',\n        whitelist: {users: [{guid: 'string'}], orgs: [{orgId: 'string', orgName: 'string'}]}\n      }\n    ]\n  },\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"},{"lang":"php","source":"<?php\n\nHttpRequest::methodRegister('PATCH');\n$request = new HttpRequest();\n$request->setUrl('http://undefinedundefined/api/organizations/%7BorgId%7D/apps/%7BappId%7D');\n$request->setMethod(HttpRequest::HTTP_METH_PATCH);\n\n$request->setBody('{\"appId\":\"string\",\"appType\":\"string\",\"created\":{\"guid\":\"string\",\"on\":\"string\"},\"description\":\"string\",\"icon\":\"string\",\"images\":{\"featuredImage1\":\"string\",\"featuredImage2\":\"string\",\"featuredImage3\":\"string\",\"featuredImage4\":\"string\",\"featuredImage5\":\"string\"},\"lastModified\":{\"by\":{\"guid\":\"string\"},\"on\":\"string\"},\"name\":\"string\",\"reviewed\":{\"by\":{\"guid\":\"string\"},\"on\":\"string\",\"notes\":\"string\"},\"status\":\"string\",\"submitted\":{\"by\":{\"guid\":\"string\"},\"on\":\"string\",\"notes\":\"string\"},\"support\":{\"email\":\"string\",\"contact\":\"string\",\"website\":\"string\"},\"title\":\"string\",\"workspaces\":[{\"id\":\"string\",\"name\":\"string\",\"endPoint\":\"string\",\"deepLink\":\"string\",\"shellProps\":\"string\",\"releaseNotes\":\"string\",\"whitelist\":{\"users\":[{\"guid\":\"string\"}],\"orgs\":[{\"orgId\":\"string\",\"orgName\":\"string\"}]}}]}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"},{"lang":"java","source":"HttpResponse<String> response = Unirest.patch(\"http://undefinedundefined/api/organizations/%7BorgId%7D/apps/%7BappId%7D\")\n  .body(\"{\\\"appId\\\":\\\"string\\\",\\\"appType\\\":\\\"string\\\",\\\"created\\\":{\\\"guid\\\":\\\"string\\\",\\\"on\\\":\\\"string\\\"},\\\"description\\\":\\\"string\\\",\\\"icon\\\":\\\"string\\\",\\\"images\\\":{\\\"featuredImage1\\\":\\\"string\\\",\\\"featuredImage2\\\":\\\"string\\\",\\\"featuredImage3\\\":\\\"string\\\",\\\"featuredImage4\\\":\\\"string\\\",\\\"featuredImage5\\\":\\\"string\\\"},\\\"lastModified\\\":{\\\"by\\\":{\\\"guid\\\":\\\"string\\\"},\\\"on\\\":\\\"string\\\"},\\\"name\\\":\\\"string\\\",\\\"reviewed\\\":{\\\"by\\\":{\\\"guid\\\":\\\"string\\\"},\\\"on\\\":\\\"string\\\",\\\"notes\\\":\\\"string\\\"},\\\"status\\\":\\\"string\\\",\\\"submitted\\\":{\\\"by\\\":{\\\"guid\\\":\\\"string\\\"},\\\"on\\\":\\\"string\\\",\\\"notes\\\":\\\"string\\\"},\\\"support\\\":{\\\"email\\\":\\\"string\\\",\\\"contact\\\":\\\"string\\\",\\\"website\\\":\\\"string\\\"},\\\"title\\\":\\\"string\\\",\\\"workspaces\\\":[{\\\"id\\\":\\\"string\\\",\\\"name\\\":\\\"string\\\",\\\"endPoint\\\":\\\"string\\\",\\\"deepLink\\\":\\\"string\\\",\\\"shellProps\\\":\\\"string\\\",\\\"releaseNotes\\\":\\\"string\\\",\\\"whitelist\\\":{\\\"users\\\":[{\\\"guid\\\":\\\"string\\\"}],\\\"orgs\\\":[{\\\"orgId\\\":\\\"string\\\",\\\"orgName\\\":\\\"string\\\"}]}}]}\")\n  .asString();"},{"lang":"go","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"http://undefinedundefined/api/organizations/%7BorgId%7D/apps/%7BappId%7D\"\n\n\tpayload := strings.NewReader(\"{\\\"appId\\\":\\\"string\\\",\\\"appType\\\":\\\"string\\\",\\\"created\\\":{\\\"guid\\\":\\\"string\\\",\\\"on\\\":\\\"string\\\"},\\\"description\\\":\\\"string\\\",\\\"icon\\\":\\\"string\\\",\\\"images\\\":{\\\"featuredImage1\\\":\\\"string\\\",\\\"featuredImage2\\\":\\\"string\\\",\\\"featuredImage3\\\":\\\"string\\\",\\\"featuredImage4\\\":\\\"string\\\",\\\"featuredImage5\\\":\\\"string\\\"},\\\"lastModified\\\":{\\\"by\\\":{\\\"guid\\\":\\\"string\\\"},\\\"on\\\":\\\"string\\\"},\\\"name\\\":\\\"string\\\",\\\"reviewed\\\":{\\\"by\\\":{\\\"guid\\\":\\\"string\\\"},\\\"on\\\":\\\"string\\\",\\\"notes\\\":\\\"string\\\"},\\\"status\\\":\\\"string\\\",\\\"submitted\\\":{\\\"by\\\":{\\\"guid\\\":\\\"string\\\"},\\\"on\\\":\\\"string\\\",\\\"notes\\\":\\\"string\\\"},\\\"support\\\":{\\\"email\\\":\\\"string\\\",\\\"contact\\\":\\\"string\\\",\\\"website\\\":\\\"string\\\"},\\\"title\\\":\\\"string\\\",\\\"workspaces\\\":[{\\\"id\\\":\\\"string\\\",\\\"name\\\":\\\"string\\\",\\\"endPoint\\\":\\\"string\\\",\\\"deepLink\\\":\\\"string\\\",\\\"shellProps\\\":\\\"string\\\",\\\"releaseNotes\\\":\\\"string\\\",\\\"whitelist\\\":{\\\"users\\\":[{\\\"guid\\\":\\\"string\\\"}],\\\"orgs\\\":[{\\\"orgId\\\":\\\"string\\\",\\\"orgName\\\":\\\"string\\\"}]}}]}\")\n\n\treq, _ := http.NewRequest(\"PATCH\", url, payload)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"python","source":"import http.client\n\nconn = http.client.HTTPConnection(\"undefinedundefined\")\n\npayload = \"{\\\"appId\\\":\\\"string\\\",\\\"appType\\\":\\\"string\\\",\\\"created\\\":{\\\"guid\\\":\\\"string\\\",\\\"on\\\":\\\"string\\\"},\\\"description\\\":\\\"string\\\",\\\"icon\\\":\\\"string\\\",\\\"images\\\":{\\\"featuredImage1\\\":\\\"string\\\",\\\"featuredImage2\\\":\\\"string\\\",\\\"featuredImage3\\\":\\\"string\\\",\\\"featuredImage4\\\":\\\"string\\\",\\\"featuredImage5\\\":\\\"string\\\"},\\\"lastModified\\\":{\\\"by\\\":{\\\"guid\\\":\\\"string\\\"},\\\"on\\\":\\\"string\\\"},\\\"name\\\":\\\"string\\\",\\\"reviewed\\\":{\\\"by\\\":{\\\"guid\\\":\\\"string\\\"},\\\"on\\\":\\\"string\\\",\\\"notes\\\":\\\"string\\\"},\\\"status\\\":\\\"string\\\",\\\"submitted\\\":{\\\"by\\\":{\\\"guid\\\":\\\"string\\\"},\\\"on\\\":\\\"string\\\",\\\"notes\\\":\\\"string\\\"},\\\"support\\\":{\\\"email\\\":\\\"string\\\",\\\"contact\\\":\\\"string\\\",\\\"website\\\":\\\"string\\\"},\\\"title\\\":\\\"string\\\",\\\"workspaces\\\":[{\\\"id\\\":\\\"string\\\",\\\"name\\\":\\\"string\\\",\\\"endPoint\\\":\\\"string\\\",\\\"deepLink\\\":\\\"string\\\",\\\"shellProps\\\":\\\"string\\\",\\\"releaseNotes\\\":\\\"string\\\",\\\"whitelist\\\":{\\\"users\\\":[{\\\"guid\\\":\\\"string\\\"}],\\\"orgs\\\":[{\\\"orgId\\\":\\\"string\\\",\\\"orgName\\\":\\\"string\\\"}]}}]}\"\n\nconn.request(\"PATCH\", \"/api/organizations/%7BorgId%7D/apps/%7BappId%7D\", payload)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"csharp","source":"var client = new RestClient(\"http://undefinedundefined/api/organizations/%7BorgId%7D/apps/%7BappId%7D\");\nvar request = new RestRequest(Method.PATCH);\nrequest.AddParameter(\"undefined\", \"{\\\"appId\\\":\\\"string\\\",\\\"appType\\\":\\\"string\\\",\\\"created\\\":{\\\"guid\\\":\\\"string\\\",\\\"on\\\":\\\"string\\\"},\\\"description\\\":\\\"string\\\",\\\"icon\\\":\\\"string\\\",\\\"images\\\":{\\\"featuredImage1\\\":\\\"string\\\",\\\"featuredImage2\\\":\\\"string\\\",\\\"featuredImage3\\\":\\\"string\\\",\\\"featuredImage4\\\":\\\"string\\\",\\\"featuredImage5\\\":\\\"string\\\"},\\\"lastModified\\\":{\\\"by\\\":{\\\"guid\\\":\\\"string\\\"},\\\"on\\\":\\\"string\\\"},\\\"name\\\":\\\"string\\\",\\\"reviewed\\\":{\\\"by\\\":{\\\"guid\\\":\\\"string\\\"},\\\"on\\\":\\\"string\\\",\\\"notes\\\":\\\"string\\\"},\\\"status\\\":\\\"string\\\",\\\"submitted\\\":{\\\"by\\\":{\\\"guid\\\":\\\"string\\\"},\\\"on\\\":\\\"string\\\",\\\"notes\\\":\\\"string\\\"},\\\"support\\\":{\\\"email\\\":\\\"string\\\",\\\"contact\\\":\\\"string\\\",\\\"website\\\":\\\"string\\\"},\\\"title\\\":\\\"string\\\",\\\"workspaces\\\":[{\\\"id\\\":\\\"string\\\",\\\"name\\\":\\\"string\\\",\\\"endPoint\\\":\\\"string\\\",\\\"deepLink\\\":\\\"string\\\",\\\"shellProps\\\":\\\"string\\\",\\\"releaseNotes\\\":\\\"string\\\",\\\"whitelist\\\":{\\\"users\\\":[{\\\"guid\\\":\\\"string\\\"}],\\\"orgs\\\":[{\\\"orgId\\\":\\\"string\\\",\\\"orgName\\\":\\\"string\\\"}]}}]}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"},{"lang":"ruby","source":"require 'uri'\nrequire 'net/http'\n\nurl = URI(\"http://undefinedundefined/api/organizations/%7BorgId%7D/apps/%7BappId%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\n\nrequest = Net::HTTP::Patch.new(url)\nrequest.body = \"{\\\"appId\\\":\\\"string\\\",\\\"appType\\\":\\\"string\\\",\\\"created\\\":{\\\"guid\\\":\\\"string\\\",\\\"on\\\":\\\"string\\\"},\\\"description\\\":\\\"string\\\",\\\"icon\\\":\\\"string\\\",\\\"images\\\":{\\\"featuredImage1\\\":\\\"string\\\",\\\"featuredImage2\\\":\\\"string\\\",\\\"featuredImage3\\\":\\\"string\\\",\\\"featuredImage4\\\":\\\"string\\\",\\\"featuredImage5\\\":\\\"string\\\"},\\\"lastModified\\\":{\\\"by\\\":{\\\"guid\\\":\\\"string\\\"},\\\"on\\\":\\\"string\\\"},\\\"name\\\":\\\"string\\\",\\\"reviewed\\\":{\\\"by\\\":{\\\"guid\\\":\\\"string\\\"},\\\"on\\\":\\\"string\\\",\\\"notes\\\":\\\"string\\\"},\\\"status\\\":\\\"string\\\",\\\"submitted\\\":{\\\"by\\\":{\\\"guid\\\":\\\"string\\\"},\\\"on\\\":\\\"string\\\",\\\"notes\\\":\\\"string\\\"},\\\"support\\\":{\\\"email\\\":\\\"string\\\",\\\"contact\\\":\\\"string\\\",\\\"website\\\":\\\"string\\\"},\\\"title\\\":\\\"string\\\",\\\"workspaces\\\":[{\\\"id\\\":\\\"string\\\",\\\"name\\\":\\\"string\\\",\\\"endPoint\\\":\\\"string\\\",\\\"deepLink\\\":\\\"string\\\",\\\"shellProps\\\":\\\"string\\\",\\\"releaseNotes\\\":\\\"string\\\",\\\"whitelist\\\":{\\\"users\\\":[{\\\"guid\\\":\\\"string\\\"}],\\\"orgs\\\":[{\\\"orgId\\\":\\\"string\\\",\\\"orgName\\\":\\\"string\\\"}]}}]}\"\n\nresponse = http.request(request)\nputs response.read_body"}]},"delete":{"summary":"Delete an application","tags":["AppRegistry"],"parameters":[{"$ref":"#/parameters/orgId"},{"$ref":"#/parameters/appId"},{"$ref":"#/parameters/authorization"}],"responses":{"200":{"description":"Application Deleted Successfully"},"400":{"description":"Bad Request"},"401":{"description":"Unauthorized"},"403":{"description":"Forbidden"},"404":{"description":"Not Found"},"500":{"description":"Internal Server Error"}},"x-code-samples":[{"lang":"shell","source":"curl --request DELETE \\\n  --url http://undefinedundefined/api/organizations/%7BorgId%7D/apps/%7BappId%7D"},{"lang":"node","source":"var request = require(\"request\");\n\nvar options = {\n  method: 'DELETE',\n  url: 'http://undefinedundefined/api/organizations/%7BorgId%7D/apps/%7BappId%7D'\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"},{"lang":"php","source":"<?php\n\n$request = new HttpRequest();\n$request->setUrl('http://undefinedundefined/api/organizations/%7BorgId%7D/apps/%7BappId%7D');\n$request->setMethod(HTTP_METH_DELETE);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"},{"lang":"java","source":"HttpResponse<String> response = Unirest.delete(\"http://undefinedundefined/api/organizations/%7BorgId%7D/apps/%7BappId%7D\")\n  .asString();"},{"lang":"go","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"http://undefinedundefined/api/organizations/%7BorgId%7D/apps/%7BappId%7D\"\n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"python","source":"import http.client\n\nconn = http.client.HTTPConnection(\"undefinedundefined\")\n\nconn.request(\"DELETE\", \"/api/organizations/%7BorgId%7D/apps/%7BappId%7D\")\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"csharp","source":"var client = new RestClient(\"http://undefinedundefined/api/organizations/%7BorgId%7D/apps/%7BappId%7D\");\nvar request = new RestRequest(Method.DELETE);\nIRestResponse response = client.Execute(request);"},{"lang":"ruby","source":"require 'uri'\nrequire 'net/http'\n\nurl = URI(\"http://undefinedundefined/api/organizations/%7BorgId%7D/apps/%7BappId%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\n\nrequest = Net::HTTP::Delete.new(url)\n\nresponse = http.request(request)\nputs response.read_body"}]}},"/api/organizations/{orgId}/apps/searchName/{appName}":{"get":{"summary":"View an application by its name","tags":["AppRegistry"],"parameters":[{"$ref":"#/parameters/orgId"},{"$ref":"#/parameters/appName"},{"$ref":"#/parameters/authorization"}],"responses":{"200":{"description":"OK","schema":{"type":"object","properties":{"appId":{"type":"string","description":"application id"},"appType":{"type":"string","description":"application type - use JGR for Jaeger apps"},"created":{"type":"object","description":"activity log for application created","properties":{"by":{"type":"object","properties":{"guid":{"type":"string","description":"user guid"}}},"on":{"type":"string","description":"created timestamp"}}},"description":{"type":"string","description":"application description"},"icon":{"type":"string","description":"URL for the icon"},"images":{"type":"object","properties":{"featuredImage1":{"type":"string"},"featuredImage2":{"type":"string"},"featuredImage3":{"type":"string"},"featuredImage4":{"type":"string"},"featuredImage5":{"type":"string"}}},"lastModified":{"type":"object","description":"activity log for application last modified","properties":{"by":{"type":"object","properties":{"guid":{"type":"string","description":"user guid"}}},"on":{"type":"string","description":"last modified timestamp"}}},"name":{"type":"string","description":"application name"},"reviewed":{"type":"object","description":"activity log for application reviewed","properties":{"by":{"type":"object","properties":{"guid":{"type":"string","description":"user guid"}}},"on":{"type":"string","description":"reviewed timestamp"},"notes":{"type":"string","description":"reviewer notes"}}},"status":{"type":"string","description":"application status"},"submitted":{"type":"object","description":"activity log for application submitted","properties":{"by":{"type":"object","properties":{"guid":{"type":"string","description":"user guid"}}},"on":{"type":"string","description":"submitted timestamp"},"notes":{"type":"string","description":"submitter notes"}}},"support":{"type":"object","description":"support information for the application","properties":{"email":{"type":"string"},"contact":{"type":"string"},"website":{"type":"string"}}},"title":{"type":"string"},"workspaces":{"type":"array","description":"list of workspaces in the application","items":{"type":"object","properties":{"id":{"type":"string","description":"workspace id"},"name":{"type":"string","description":"workspace name"},"endPoint":{"type":"string"},"deepLink":{"type":"string"},"shellProps":{"type":"string"},"releaseNotes":{"type":"string"},"whitelist":{"type":"object","description":"list of whitelisted users & orgs","properties":{"users":{"type":"array","items":{"type":"object","properties":{"guid":{"type":"string"}}}},"orgs":{"type":"array","items":{"type":"object","properties":{"orgId":{"type":"string"},"orgName":{"type":"string"}}}}}}}}}}}},"400":{"description":"Bad Request"},"401":{"description":"Unauthorized"},"403":{"description":"Forbidden"},"404":{"description":"Not Found"},"500":{"description":"Internal Server Error"}},"x-code-samples":[{"lang":"shell","source":"curl --request GET \\\n  --url http://undefinedundefined/api/organizations/%7BorgId%7D/apps/searchName/%7BappName%7D"},{"lang":"node","source":"var request = require(\"request\");\n\nvar options = {\n  method: 'GET',\n  url: 'http://undefinedundefined/api/organizations/%7BorgId%7D/apps/searchName/%7BappName%7D'\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"},{"lang":"php","source":"<?php\n\n$request = new HttpRequest();\n$request->setUrl('http://undefinedundefined/api/organizations/%7BorgId%7D/apps/searchName/%7BappName%7D');\n$request->setMethod(HTTP_METH_GET);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"},{"lang":"java","source":"HttpResponse<String> response = Unirest.get(\"http://undefinedundefined/api/organizations/%7BorgId%7D/apps/searchName/%7BappName%7D\")\n  .asString();"},{"lang":"go","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"http://undefinedundefined/api/organizations/%7BorgId%7D/apps/searchName/%7BappName%7D\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"python","source":"import http.client\n\nconn = http.client.HTTPConnection(\"undefinedundefined\")\n\nconn.request(\"GET\", \"/api/organizations/%7BorgId%7D/apps/searchName/%7BappName%7D\")\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"csharp","source":"var client = new RestClient(\"http://undefinedundefined/api/organizations/%7BorgId%7D/apps/searchName/%7BappName%7D\");\nvar request = new RestRequest(Method.GET);\nIRestResponse response = client.Execute(request);"},{"lang":"ruby","source":"require 'uri'\nrequire 'net/http'\n\nurl = URI(\"http://undefinedundefined/api/organizations/%7BorgId%7D/apps/searchName/%7BappName%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\n\nrequest = Net::HTTP::Get.new(url)\n\nresponse = http.request(request)\nputs response.read_body"}]}},"/api/organizations/{orgId}/apps/{appId}/submit":{"post":{"summary":"Submit an application","tags":["AppRegistry"],"parameters":[{"$ref":"#/parameters/orgId"},{"$ref":"#/parameters/appId"},{"$ref":"#/parameters/authorization"},{"name":"body","in":"body","required":true,"description":"submitter notes","schema":{"type":"string"}}],"responses":{"200":{"description":"Application Submitted Successfully","schema":{"type":"object","properties":{"appId":{"type":"string","description":"application id"},"appType":{"type":"string","description":"application type - use JGR for Jaeger apps"},"created":{"type":"object","description":"activity log for application created","properties":{"by":{"type":"object","properties":{"guid":{"type":"string","description":"user guid"}}},"on":{"type":"string","description":"created timestamp"}}},"description":{"type":"string","description":"application description"},"icon":{"type":"string","description":"URL for the icon"},"images":{"type":"object","properties":{"featuredImage1":{"type":"string"},"featuredImage2":{"type":"string"},"featuredImage3":{"type":"string"},"featuredImage4":{"type":"string"},"featuredImage5":{"type":"string"}}},"lastModified":{"type":"object","description":"activity log for application last modified","properties":{"by":{"type":"object","properties":{"guid":{"type":"string","description":"user guid"}}},"on":{"type":"string","description":"last modified timestamp"}}},"name":{"type":"string","description":"application name"},"reviewed":{"type":"object","description":"activity log for application reviewed","properties":{"by":{"type":"object","properties":{"guid":{"type":"string","description":"user guid"}}},"on":{"type":"string","description":"reviewed timestamp"},"notes":{"type":"string","description":"reviewer notes"}}},"status":{"type":"string","description":"application status"},"submitted":{"type":"object","description":"activity log for application submitted","properties":{"by":{"type":"object","properties":{"guid":{"type":"string","description":"user guid"}}},"on":{"type":"string","description":"submitted timestamp"},"notes":{"type":"string","description":"submitter notes"}}},"support":{"type":"object","description":"support information for the application","properties":{"email":{"type":"string"},"contact":{"type":"string"},"website":{"type":"string"}}},"title":{"type":"string"},"workspaces":{"type":"array","description":"list of workspaces in the application","items":{"type":"object","properties":{"id":{"type":"string","description":"workspace id"},"name":{"type":"string","description":"workspace name"},"endPoint":{"type":"string"},"deepLink":{"type":"string"},"shellProps":{"type":"string"},"releaseNotes":{"type":"string"},"whitelist":{"type":"object","description":"list of whitelisted users & orgs","properties":{"users":{"type":"array","items":{"type":"object","properties":{"guid":{"type":"string"}}}},"orgs":{"type":"array","items":{"type":"object","properties":{"orgId":{"type":"string"},"orgName":{"type":"string"}}}}}}}}}}}},"400":{"description":"Bad Request"},"401":{"description":"Unauthorized"},"403":{"description":"Forbidden"},"404":{"description":"Not Found"},"500":{"description":"Internal Server Error"}},"x-code-samples":[{"lang":"shell","source":"curl --request POST \\\n  --url http://undefinedundefined/api/organizations/%7BorgId%7D/apps/%7BappId%7D/submit \\\n  --data '\"string\"'"},{"lang":"node","source":"var request = require(\"request\");\n\nvar options = {\n  method: 'POST',\n  url: 'http://undefinedundefined/api/organizations/%7BorgId%7D/apps/%7BappId%7D/submit',\n  body: 'string',\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"},{"lang":"php","source":"<?php\n\n$request = new HttpRequest();\n$request->setUrl('http://undefinedundefined/api/organizations/%7BorgId%7D/apps/%7BappId%7D/submit');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setBody('\"string\"');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"},{"lang":"java","source":"HttpResponse<String> response = Unirest.post(\"http://undefinedundefined/api/organizations/%7BorgId%7D/apps/%7BappId%7D/submit\")\n  .body(\"\\\"string\\\"\")\n  .asString();"},{"lang":"go","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"http://undefinedundefined/api/organizations/%7BorgId%7D/apps/%7BappId%7D/submit\"\n\n\tpayload := strings.NewReader(\"\\\"string\\\"\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"python","source":"import http.client\n\nconn = http.client.HTTPConnection(\"undefinedundefined\")\n\npayload = \"\\\"string\\\"\"\n\nconn.request(\"POST\", \"/api/organizations/%7BorgId%7D/apps/%7BappId%7D/submit\", payload)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"csharp","source":"var client = new RestClient(\"http://undefinedundefined/api/organizations/%7BorgId%7D/apps/%7BappId%7D/submit\");\nvar request = new RestRequest(Method.POST);\nrequest.AddParameter(\"undefined\", \"\\\"string\\\"\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"},{"lang":"ruby","source":"require 'uri'\nrequire 'net/http'\n\nurl = URI(\"http://undefinedundefined/api/organizations/%7BorgId%7D/apps/%7BappId%7D/submit\")\n\nhttp = Net::HTTP.new(url.host, url.port)\n\nrequest = Net::HTTP::Post.new(url)\nrequest.body = \"\\\"string\\\"\"\n\nresponse = http.request(request)\nputs response.read_body"}]}},"/api/organizations/{orgId}/apps":{"get":{"summary":"List all applications for a user","tags":["AppRegistry"],"parameters":[{"$ref":"#/parameters/orgId"},{"$ref":"#/parameters/appType"},{"name":"offset","description":"offset","in":"query","required":true,"type":"integer"},{"name":"pageSize","description":"pageSize","in":"query","required":true,"type":"integer"},{"$ref":"#/parameters/authorization"}],"responses":{"200":{"description":"OK","schema":{"type":"array","items":{"type":"object","properties":{"appId":{"type":"string","description":"application id"},"appType":{"type":"string","description":"application type - use JGR for Jaeger apps"},"created":{"type":"object","description":"activity log for application created","properties":{"by":{"type":"object","properties":{"guid":{"type":"string","description":"user guid"}}},"on":{"type":"string","description":"created timestamp"}}},"description":{"type":"string","description":"application description"},"icon":{"type":"string","description":"URL for the icon"},"images":{"type":"object","properties":{"featuredImage1":{"type":"string"},"featuredImage2":{"type":"string"},"featuredImage3":{"type":"string"},"featuredImage4":{"type":"string"},"featuredImage5":{"type":"string"}}},"lastModified":{"type":"object","description":"activity log for application last modified","properties":{"by":{"type":"object","properties":{"guid":{"type":"string","description":"user guid"}}},"on":{"type":"string","description":"last modified timestamp"}}},"name":{"type":"string","description":"application name"},"reviewed":{"type":"object","description":"activity log for application reviewed","properties":{"by":{"type":"object","properties":{"guid":{"type":"string","description":"user guid"}}},"on":{"type":"string","description":"reviewed timestamp"},"notes":{"type":"string","description":"reviewer notes"}}},"status":{"type":"string","description":"application status"},"submitted":{"type":"object","description":"activity log for application submitted","properties":{"by":{"type":"object","properties":{"guid":{"type":"string","description":"user guid"}}},"on":{"type":"string","description":"submitted timestamp"},"notes":{"type":"string","description":"submitter notes"}}},"support":{"type":"object","description":"support information for the application","properties":{"email":{"type":"string"},"contact":{"type":"string"},"website":{"type":"string"}}},"title":{"type":"string"},"workspaces":{"type":"array","description":"list of workspaces in the application","items":{"type":"object","properties":{"id":{"type":"string","description":"workspace id"},"name":{"type":"string","description":"workspace name"},"endPoint":{"type":"string"},"deepLink":{"type":"string"},"shellProps":{"type":"string"},"releaseNotes":{"type":"string"},"whitelist":{"type":"object","description":"list of whitelisted users & orgs","properties":{"users":{"type":"array","items":{"type":"object","properties":{"guid":{"type":"string"}}}},"orgs":{"type":"array","items":{"type":"object","properties":{"orgId":{"type":"string"},"orgName":{"type":"string"}}}}}}}}}}}}},"400":{"description":"Bad Request"},"401":{"description":"Unauthorized"},"403":{"description":"Forbidden"},"404":{"description":"Not Found"},"500":{"description":"Internal Server Error"}},"x-code-samples":[{"lang":"shell","source":"curl --request GET \\\n  --url 'http://undefinedundefined/api/organizations/%7BorgId%7D/apps?appType=SOME_STRING_VALUE&offset=SOME_INTEGER_VALUE&pageSize=SOME_INTEGER_VALUE'"},{"lang":"node","source":"var request = require(\"request\");\n\nvar options = {\n  method: 'GET',\n  url: 'http://undefinedundefined/api/organizations/%7BorgId%7D/apps',\n  qs: {\n    appType: 'SOME_STRING_VALUE',\n    offset: 'SOME_INTEGER_VALUE',\n    pageSize: 'SOME_INTEGER_VALUE'\n  }\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"},{"lang":"php","source":"<?php\n\n$request = new HttpRequest();\n$request->setUrl('http://undefinedundefined/api/organizations/%7BorgId%7D/apps');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setQueryData(array(\n  'appType' => 'SOME_STRING_VALUE',\n  'offset' => 'SOME_INTEGER_VALUE',\n  'pageSize' => 'SOME_INTEGER_VALUE'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"},{"lang":"java","source":"HttpResponse<String> response = Unirest.get(\"http://undefinedundefined/api/organizations/%7BorgId%7D/apps?appType=SOME_STRING_VALUE&offset=SOME_INTEGER_VALUE&pageSize=SOME_INTEGER_VALUE\")\n  .asString();"},{"lang":"go","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"http://undefinedundefined/api/organizations/%7BorgId%7D/apps?appType=SOME_STRING_VALUE&offset=SOME_INTEGER_VALUE&pageSize=SOME_INTEGER_VALUE\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"python","source":"import http.client\n\nconn = http.client.HTTPConnection(\"undefinedundefined\")\n\nconn.request(\"GET\", \"/api/organizations/%7BorgId%7D/apps?appType=SOME_STRING_VALUE&offset=SOME_INTEGER_VALUE&pageSize=SOME_INTEGER_VALUE\")\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"csharp","source":"var client = new RestClient(\"http://undefinedundefined/api/organizations/%7BorgId%7D/apps?appType=SOME_STRING_VALUE&offset=SOME_INTEGER_VALUE&pageSize=SOME_INTEGER_VALUE\");\nvar request = new RestRequest(Method.GET);\nIRestResponse response = client.Execute(request);"},{"lang":"ruby","source":"require 'uri'\nrequire 'net/http'\n\nurl = URI(\"http://undefinedundefined/api/organizations/%7BorgId%7D/apps?appType=SOME_STRING_VALUE&offset=SOME_INTEGER_VALUE&pageSize=SOME_INTEGER_VALUE\")\n\nhttp = Net::HTTP.new(url.host, url.port)\n\nrequest = Net::HTTP::Get.new(url)\n\nresponse = http.request(request)\nputs response.read_body"}]}},"/api/organizations/{orgId}/apps/{appId}/upload":{"post":{"summary":"Upload application icon","tags":["AppRegistry"],"consumes":["multipart/form-data"],"parameters":[{"$ref":"#/parameters/orgId"},{"$ref":"#/parameters/appId"},{"$ref":"#/parameters/appType"},{"name":"assetType","description":"Asset type - use ICON","in":"query","required":true,"type":"string","default":"ICON"},{"$ref":"#/parameters/authorization"},{"name":"body","in":"body","required":true,"schema":{"type":"object","properties":{"file":{"description":"icon file","type":"string","format":"binary"}},"required":["file"]}}],"responses":{"200":{"description":"OK"},"400":{"description":"Bad Request"},"401":{"description":"Unauthorized"},"403":{"description":"Forbidden"},"404":{"description":"Not Found"},"500":{"description":"Internal Server Error"}},"x-code-samples":[{"lang":"shell","source":"curl --request POST \\\n  --url 'http://undefinedundefined/api/organizations/%7BorgId%7D/apps/%7BappId%7D/upload?appType=SOME_STRING_VALUE&assetType=ICON' \\\n  --header 'accept: multipart/form-data' \\\n  --data '{\"file\":\"string\"}'"},{"lang":"node","source":"var request = require(\"request\");\n\nvar options = {\n  method: 'POST',\n  url: 'http://undefinedundefined/api/organizations/%7BorgId%7D/apps/%7BappId%7D/upload',\n  qs: {appType: 'SOME_STRING_VALUE', assetType: 'ICON'},\n  headers: {accept: 'multipart/form-data'},\n  body: {file: 'string'},\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"},{"lang":"php","source":"<?php\n\n$request = new HttpRequest();\n$request->setUrl('http://undefinedundefined/api/organizations/%7BorgId%7D/apps/%7BappId%7D/upload');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setQueryData(array(\n  'appType' => 'SOME_STRING_VALUE',\n  'assetType' => 'ICON'\n));\n\n$request->setHeaders(array(\n  'accept' => 'multipart/form-data'\n));\n\n$request->setBody('{\"file\":\"string\"}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"},{"lang":"java","source":"HttpResponse<String> response = Unirest.post(\"http://undefinedundefined/api/organizations/%7BorgId%7D/apps/%7BappId%7D/upload?appType=SOME_STRING_VALUE&assetType=ICON\")\n  .header(\"accept\", \"multipart/form-data\")\n  .body(\"{\\\"file\\\":\\\"string\\\"}\")\n  .asString();"},{"lang":"go","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"http://undefinedundefined/api/organizations/%7BorgId%7D/apps/%7BappId%7D/upload?appType=SOME_STRING_VALUE&assetType=ICON\"\n\n\tpayload := strings.NewReader(\"{\\\"file\\\":\\\"string\\\"}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"accept\", \"multipart/form-data\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"python","source":"import http.client\n\nconn = http.client.HTTPConnection(\"undefinedundefined\")\n\npayload = \"{\\\"file\\\":\\\"string\\\"}\"\n\nheaders = { 'accept': \"multipart/form-data\" }\n\nconn.request(\"POST\", \"/api/organizations/%7BorgId%7D/apps/%7BappId%7D/upload?appType=SOME_STRING_VALUE&assetType=ICON\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"csharp","source":"var client = new RestClient(\"http://undefinedundefined/api/organizations/%7BorgId%7D/apps/%7BappId%7D/upload?appType=SOME_STRING_VALUE&assetType=ICON\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"accept\", \"multipart/form-data\");\nrequest.AddParameter(\"undefined\", \"{\\\"file\\\":\\\"string\\\"}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"},{"lang":"ruby","source":"require 'uri'\nrequire 'net/http'\n\nurl = URI(\"http://undefinedundefined/api/organizations/%7BorgId%7D/apps/%7BappId%7D/upload?appType=SOME_STRING_VALUE&assetType=ICON\")\n\nhttp = Net::HTTP.new(url.host, url.port)\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"accept\"] = 'multipart/form-data'\nrequest.body = \"{\\\"file\\\":\\\"string\\\"}\"\n\nresponse = http.request(request)\nputs response.read_body"}]}},"/api/organizations/{orgId}/apps/health":{"get":{"summary":"View AppRegistry health","tags":["AppRegistry"],"produces":["application/json"],"parameters":[{"$ref":"#/parameters/orgId"},{"$ref":"#/parameters/authorization"}],"responses":{"200":{"description":"OK","schema":{"type":"object","properties":{"status":{"type":"string"}}}},"400":{"description":"Bad Request"},"401":{"description":"Unauthorized"},"403":{"description":"Forbidden"},"404":{"description":"Not Found"},"500":{"description":"Internal Server Error"}},"x-code-samples":[{"lang":"shell","source":"curl --request GET \\\n  --url http://undefinedundefined/api/organizations/%7BorgId%7D/apps/health \\\n  --header 'content-type: application/json'"},{"lang":"node","source":"var request = require(\"request\");\n\nvar options = {\n  method: 'GET',\n  url: 'http://undefinedundefined/api/organizations/%7BorgId%7D/apps/health',\n  headers: {'content-type': 'application/json'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"},{"lang":"php","source":"<?php\n\n$request = new HttpRequest();\n$request->setUrl('http://undefinedundefined/api/organizations/%7BorgId%7D/apps/health');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"},{"lang":"java","source":"HttpResponse<String> response = Unirest.get(\"http://undefinedundefined/api/organizations/%7BorgId%7D/apps/health\")\n  .header(\"content-type\", \"application/json\")\n  .asString();"},{"lang":"go","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"http://undefinedundefined/api/organizations/%7BorgId%7D/apps/health\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"python","source":"import http.client\n\nconn = http.client.HTTPConnection(\"undefinedundefined\")\n\nheaders = { 'content-type': \"application/json\" }\n\nconn.request(\"GET\", \"/api/organizations/%7BorgId%7D/apps/health\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"csharp","source":"var client = new RestClient(\"http://undefinedundefined/api/organizations/%7BorgId%7D/apps/health\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"content-type\", \"application/json\");\nIRestResponse response = client.Execute(request);"},{"lang":"ruby","source":"require 'uri'\nrequire 'net/http'\n\nurl = URI(\"http://undefinedundefined/api/organizations/%7BorgId%7D/apps/health\")\n\nhttp = Net::HTTP.new(url.host, url.port)\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"content-type\"] = 'application/json'\n\nresponse = http.request(request)\nputs response.read_body"}]}},"/api/organizations/{orgId}/policy/{intId}":{"get":{"summary":"Get application policy","tags":["Atlas Policy Engine"],"produces":["application/json"],"parameters":[{"$ref":"#/parameters/orgId"},{"name":"intId","description":"Integration ID","in":"path","required":true,"type":"string"},{"$ref":"#/parameters/authorization"}],"responses":{"200":{"description":"OK","schema":{"type":"object","properties":{"orgCode":{"type":"string","description":"IMS org id"},"appCode":{"type":"string","description":"AMS application id"},"appPolicyCode":{"type":"string"},"apiKey":{"type":"string"},"quotaPolicyCode":{"type":"string"},"planCode":{"type":"string"},"status":{"type":"string"},"_links":{"type":"array","items":{"type":"object","properties":{"deprecation":{"type":"string"},"href":{"type":"string"},"hreflang":{"type":"string"},"media":{"type":"string"},"rel":{"type":"string"},"templated":{"type":"boolean"},"title":{"type":"string"},"type":{"type":"string"}}}}}}},"400":{"description":"Bad Request"},"401":{"description":"Unauthorized"},"403":{"description":"Forbidden"},"404":{"description":"Not Found"},"500":{"description":"Internal Server Error"}},"x-code-samples":[{"lang":"shell","source":"curl --request GET \\\n  --url http://undefinedundefined/api/organizations/%7BorgId%7D/policy/%7BintId%7D \\\n  --header 'content-type: application/json'"},{"lang":"node","source":"var request = require(\"request\");\n\nvar options = {\n  method: 'GET',\n  url: 'http://undefinedundefined/api/organizations/%7BorgId%7D/policy/%7BintId%7D',\n  headers: {'content-type': 'application/json'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"},{"lang":"php","source":"<?php\n\n$request = new HttpRequest();\n$request->setUrl('http://undefinedundefined/api/organizations/%7BorgId%7D/policy/%7BintId%7D');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"},{"lang":"java","source":"HttpResponse<String> response = Unirest.get(\"http://undefinedundefined/api/organizations/%7BorgId%7D/policy/%7BintId%7D\")\n  .header(\"content-type\", \"application/json\")\n  .asString();"},{"lang":"go","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"http://undefinedundefined/api/organizations/%7BorgId%7D/policy/%7BintId%7D\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"python","source":"import http.client\n\nconn = http.client.HTTPConnection(\"undefinedundefined\")\n\nheaders = { 'content-type': \"application/json\" }\n\nconn.request(\"GET\", \"/api/organizations/%7BorgId%7D/policy/%7BintId%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"csharp","source":"var client = new RestClient(\"http://undefinedundefined/api/organizations/%7BorgId%7D/policy/%7BintId%7D\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"content-type\", \"application/json\");\nIRestResponse response = client.Execute(request);"},{"lang":"ruby","source":"require 'uri'\nrequire 'net/http'\n\nurl = URI(\"http://undefinedundefined/api/organizations/%7BorgId%7D/policy/%7BintId%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"content-type\"] = 'application/json'\n\nresponse = http.request(request)\nputs response.read_body"}]}},"/api/organizations/{orgId}/policy/{intId}/usage":{"get":{"summary":"View quota usage","tags":["Atlas Policy Engine"],"produces":["application/json"],"parameters":[{"$ref":"#/parameters/orgId"},{"name":"intId","description":"Integration ID","in":"path","required":true,"type":"string"},{"$ref":"#/parameters/authorization"}],"responses":{"200":{"description":"OK","schema":{"type":"object","properties":{"policyCode":{"type":"string"},"planCode":{"type":"string"},"orgCode":{"type":"string"},"refreshCycle":{"type":"string"},"policyType":{"type":"string"},"status":{"type":"string"},"availableQuantity":{"type":"integer"},"consumedQuantity":{"type":"integer"},"selectors":{"type":"array","items":{"type":"object","properties":{"selector":{"type":"string"},"consumedQuantity":{"type":"integer"}}}}}}},"400":{"description":"Bad Request"},"401":{"description":"Unauthorized"},"403":{"description":"Forbidden"},"404":{"description":"Not Found"},"500":{"description":"Internal Server Error"}},"x-code-samples":[{"lang":"shell","source":"curl --request GET \\\n  --url http://undefinedundefined/api/organizations/%7BorgId%7D/policy/%7BintId%7D/usage \\\n  --header 'content-type: application/json'"},{"lang":"node","source":"var request = require(\"request\");\n\nvar options = {\n  method: 'GET',\n  url: 'http://undefinedundefined/api/organizations/%7BorgId%7D/policy/%7BintId%7D/usage',\n  headers: {'content-type': 'application/json'}\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"},{"lang":"php","source":"<?php\n\n$request = new HttpRequest();\n$request->setUrl('http://undefinedundefined/api/organizations/%7BorgId%7D/policy/%7BintId%7D/usage');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"},{"lang":"java","source":"HttpResponse<String> response = Unirest.get(\"http://undefinedundefined/api/organizations/%7BorgId%7D/policy/%7BintId%7D/usage\")\n  .header(\"content-type\", \"application/json\")\n  .asString();"},{"lang":"go","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"http://undefinedundefined/api/organizations/%7BorgId%7D/policy/%7BintId%7D/usage\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"python","source":"import http.client\n\nconn = http.client.HTTPConnection(\"undefinedundefined\")\n\nheaders = { 'content-type': \"application/json\" }\n\nconn.request(\"GET\", \"/api/organizations/%7BorgId%7D/policy/%7BintId%7D/usage\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"csharp","source":"var client = new RestClient(\"http://undefinedundefined/api/organizations/%7BorgId%7D/policy/%7BintId%7D/usage\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"content-type\", \"application/json\");\nIRestResponse response = client.Execute(request);"},{"lang":"ruby","source":"require 'uri'\nrequire 'net/http'\n\nurl = URI(\"http://undefinedundefined/api/organizations/%7BorgId%7D/policy/%7BintId%7D/usage\")\n\nhttp = Net::HTTP.new(url.host, url.port)\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"content-type\"] = 'application/json'\n\nresponse = http.request(request)\nputs response.read_body"}]}},"/api/organizations":{"post":{"summary":"Create an IMS Org","tags":["Organizations"],"consumes":["application/json"],"produces":["application/json"],"parameters":[{"$ref":"#/parameters/authorization"},{"name":"body","in":"body","required":true,"schema":{"type":"object","required":["name"],"properties":{"name":{"type":"string"},"offer_id":{"type":"string"},"org_id":{"type":"string"},"locale":{"type":"string"}}},"description":"build org request"}],"responses":{"201":{"description":"IMS Org Created Successfully","schema":{"type":"object","properties":{"id":{"type":"string"},"code":{"type":"string"},"name":{"type":"string"},"description":{"type":"string"},"type":{"type":"string","description":"ConsumerType enum [\"adobeid\",\"entp\",\"internal\",\"direct\"]"},"idAlias":{"type":"string"},"roles":{"type":"array","items":{"type":"object","properties":{"principal":{"type":"string"},"organization":{"type":"string"},"nameRole":{"type":"string"},"target":{"type":"string"},"targetType":{"type":"string"},"targetData":{"type":"string","example":"linkedHashMap<string, string>"}}}},"role":{"type":"string"}}}},"400":{"description":"Bad Request"},"401":{"description":"Unauthorized"},"403":{"description":"Forbidden"},"500":{"description":"Internal Server Error"}},"x-code-samples":[{"lang":"shell","source":"curl --request POST \\\n  --url http://undefinedundefined/api/organizations \\\n  --header 'accept: application/json' \\\n  --header 'content-type: application/json' \\\n  --data '{\"name\":\"string\",\"offer_id\":\"string\",\"org_id\":\"string\",\"locale\":\"string\"}'"},{"lang":"node","source":"var request = require(\"request\");\n\nvar options = {\n  method: 'POST',\n  url: 'http://undefinedundefined/api/organizations',\n  headers: {accept: 'application/json', 'content-type': 'application/json'},\n  body: {name: 'string', offer_id: 'string', org_id: 'string', locale: 'string'},\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"},{"lang":"php","source":"<?php\n\n$request = new HttpRequest();\n$request->setUrl('http://undefinedundefined/api/organizations');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders(array(\n  'accept' => 'application/json',\n  'content-type' => 'application/json'\n));\n\n$request->setBody('{\"name\":\"string\",\"offer_id\":\"string\",\"org_id\":\"string\",\"locale\":\"string\"}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"},{"lang":"java","source":"HttpResponse<String> response = Unirest.post(\"http://undefinedundefined/api/organizations\")\n  .header(\"accept\", \"application/json\")\n  .header(\"content-type\", \"application/json\")\n  .body(\"{\\\"name\\\":\\\"string\\\",\\\"offer_id\\\":\\\"string\\\",\\\"org_id\\\":\\\"string\\\",\\\"locale\\\":\\\"string\\\"}\")\n  .asString();"},{"lang":"go","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"http://undefinedundefined/api/organizations\"\n\n\tpayload := strings.NewReader(\"{\\\"name\\\":\\\"string\\\",\\\"offer_id\\\":\\\"string\\\",\\\"org_id\\\":\\\"string\\\",\\\"locale\\\":\\\"string\\\"}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"accept\", \"application/json\")\n\treq.Header.Add(\"content-type\", \"application/json\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"python","source":"import http.client\n\nconn = http.client.HTTPConnection(\"undefinedundefined\")\n\npayload = \"{\\\"name\\\":\\\"string\\\",\\\"offer_id\\\":\\\"string\\\",\\\"org_id\\\":\\\"string\\\",\\\"locale\\\":\\\"string\\\"}\"\n\nheaders = {\n    'accept': \"application/json\",\n    'content-type': \"application/json\"\n    }\n\nconn.request(\"POST\", \"/api/organizations\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"csharp","source":"var client = new RestClient(\"http://undefinedundefined/api/organizations\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"accept\", \"application/json\");\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddParameter(\"application/json\", \"{\\\"name\\\":\\\"string\\\",\\\"offer_id\\\":\\\"string\\\",\\\"org_id\\\":\\\"string\\\",\\\"locale\\\":\\\"string\\\"}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"},{"lang":"ruby","source":"require 'uri'\nrequire 'net/http'\n\nurl = URI(\"http://undefinedundefined/api/organizations\")\n\nhttp = Net::HTTP.new(url.host, url.port)\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"accept\"] = 'application/json'\nrequest[\"content-type\"] = 'application/json'\nrequest.body = \"{\\\"name\\\":\\\"string\\\",\\\"offer_id\\\":\\\"string\\\",\\\"org_id\\\":\\\"string\\\",\\\"locale\\\":\\\"string\\\"}\"\n\nresponse = http.request(request)\nputs response.read_body"}]}},"/api/organizations/{orgId}/projects":{"get":{"summary":"List all projects","tags":["Projects"],"parameters":[{"$ref":"#/parameters/orgId"},{"$ref":"#/parameters/authorization"},{"$ref":"#/parameters/x-api-key"}],"responses":{"200":{"description":"Found projects","schema":{"type":"array","items":{"type":"object","properties":{"id":{"type":"string","description":"Project id"},"name":{"type":"string","description":"Project name"},"description":{"type":"string","description":"Project description"},"type":{"type":"string","description":"Project type"},"enabled":{"type":"boolean","description":"Is project enabled"},"deleted":{"type":"boolean","description":"Is project deleted"},"title":{"type":"string","description":"Project title"},"org_id":{"type":"string","description":"Org id"},"date_created":{"type":"string","format":"date","description":"Project create date"},"date_last_modified":{"type":"string","format":"date","description":"Project last modify date"},"who_created":{"type":"string","description":"Created by"},"who_last_modified":{"type":"string","description":"Last modified by"}}}}},"500":{"description":"Error getting projects"}},"x-code-samples":[{"lang":"shell","source":"curl --request GET \\\n  --url http://undefinedundefined/api/organizations/%7BorgId%7D/projects"},{"lang":"node","source":"var request = require(\"request\");\n\nvar options = {\n  method: 'GET',\n  url: 'http://undefinedundefined/api/organizations/%7BorgId%7D/projects'\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"},{"lang":"php","source":"<?php\n\n$request = new HttpRequest();\n$request->setUrl('http://undefinedundefined/api/organizations/%7BorgId%7D/projects');\n$request->setMethod(HTTP_METH_GET);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"},{"lang":"java","source":"HttpResponse<String> response = Unirest.get(\"http://undefinedundefined/api/organizations/%7BorgId%7D/projects\")\n  .asString();"},{"lang":"go","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"http://undefinedundefined/api/organizations/%7BorgId%7D/projects\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"python","source":"import http.client\n\nconn = http.client.HTTPConnection(\"undefinedundefined\")\n\nconn.request(\"GET\", \"/api/organizations/%7BorgId%7D/projects\")\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"csharp","source":"var client = new RestClient(\"http://undefinedundefined/api/organizations/%7BorgId%7D/projects\");\nvar request = new RestRequest(Method.GET);\nIRestResponse response = client.Execute(request);"},{"lang":"ruby","source":"require 'uri'\nrequire 'net/http'\n\nurl = URI(\"http://undefinedundefined/api/organizations/%7BorgId%7D/projects\")\n\nhttp = Net::HTTP.new(url.host, url.port)\n\nrequest = Net::HTTP::Get.new(url)\n\nresponse = http.request(request)\nputs response.read_body"}]},"post":{"summary":"Create a project","tags":["Projects"],"parameters":[{"$ref":"#/parameters/orgId"},{"$ref":"#/parameters/authorization"},{"$ref":"#/parameters/x-api-key"},{"name":"body","in":"body","schema":{"type":"object","required":["name","title","type"],"properties":{"name":{"type":"string"},"title":{"type":"string"},"who_created":{"type":"string"},"description":{"type":"string"},"type":{"type":"string"}}},"description":"New project info","required":true}],"responses":{"201":{"description":"Create project success","schema":{"type":"object","properties":{"projectId":{"type":"string","description":"Project id"},"projectType":{"type":"string","description":"Project type"},"workspaceId":{"type":"string","description":"Workspace id"}}}},"400":{"description":"Bad Request"},"401":{"description":"Unauthorized"},"403":{"description":"Forbidden"},"404":{"description":"Not Found"},"500":{"description":"Internal Server Error"}},"x-code-samples":[{"lang":"shell","source":"curl --request POST \\\n  --url http://undefinedundefined/api/organizations/%7BorgId%7D/projects \\\n  --data '{\"name\":\"string\",\"title\":\"string\",\"who_created\":\"string\",\"description\":\"string\",\"type\":\"string\"}'"},{"lang":"node","source":"var request = require(\"request\");\n\nvar options = {\n  method: 'POST',\n  url: 'http://undefinedundefined/api/organizations/%7BorgId%7D/projects',\n  body: {\n    name: 'string',\n    title: 'string',\n    who_created: 'string',\n    description: 'string',\n    type: 'string'\n  },\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"},{"lang":"php","source":"<?php\n\n$request = new HttpRequest();\n$request->setUrl('http://undefinedundefined/api/organizations/%7BorgId%7D/projects');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setBody('{\"name\":\"string\",\"title\":\"string\",\"who_created\":\"string\",\"description\":\"string\",\"type\":\"string\"}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"},{"lang":"java","source":"HttpResponse<String> response = Unirest.post(\"http://undefinedundefined/api/organizations/%7BorgId%7D/projects\")\n  .body(\"{\\\"name\\\":\\\"string\\\",\\\"title\\\":\\\"string\\\",\\\"who_created\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"type\\\":\\\"string\\\"}\")\n  .asString();"},{"lang":"go","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"http://undefinedundefined/api/organizations/%7BorgId%7D/projects\"\n\n\tpayload := strings.NewReader(\"{\\\"name\\\":\\\"string\\\",\\\"title\\\":\\\"string\\\",\\\"who_created\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"type\\\":\\\"string\\\"}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"python","source":"import http.client\n\nconn = http.client.HTTPConnection(\"undefinedundefined\")\n\npayload = \"{\\\"name\\\":\\\"string\\\",\\\"title\\\":\\\"string\\\",\\\"who_created\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"type\\\":\\\"string\\\"}\"\n\nconn.request(\"POST\", \"/api/organizations/%7BorgId%7D/projects\", payload)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"csharp","source":"var client = new RestClient(\"http://undefinedundefined/api/organizations/%7BorgId%7D/projects\");\nvar request = new RestRequest(Method.POST);\nrequest.AddParameter(\"undefined\", \"{\\\"name\\\":\\\"string\\\",\\\"title\\\":\\\"string\\\",\\\"who_created\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"type\\\":\\\"string\\\"}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"},{"lang":"ruby","source":"require 'uri'\nrequire 'net/http'\n\nurl = URI(\"http://undefinedundefined/api/organizations/%7BorgId%7D/projects\")\n\nhttp = Net::HTTP.new(url.host, url.port)\n\nrequest = Net::HTTP::Post.new(url)\nrequest.body = \"{\\\"name\\\":\\\"string\\\",\\\"title\\\":\\\"string\\\",\\\"who_created\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"type\\\":\\\"string\\\"}\"\n\nresponse = http.request(request)\nputs response.read_body"}]}},"/api/organizations/{orgId}/projects/{projectId}/workspaces":{"get":{"summary":"List all workspaces in a project","tags":["Projects"],"parameters":[{"$ref":"#/parameters/orgId"},{"$ref":"#/parameters/projectId"},{"$ref":"#/parameters/authorization"},{"$ref":"#/parameters/x-api-key"}],"responses":{"200":{"description":"Workspaces for project","schema":{"type":"array","items":{"type":"object","properties":{"id":{"type":"string","description":"Workspace id"},"name":{"type":"string","description":"Workspace name"},"title":{"type":"string","description":"Workspace title"},"description":{"type":"string","description":"Workspace description"},"quota_usage":{"type":"string","description":"Quota usage for workspace"},"enabled":{"type":"boolean","description":"Is project enabled"},"runtime_enabled":{"type":"boolean","description":"Is runtime enabled"},"date_created":{"type":"string","format":"date","description":"Workspace create date"},"date_last_modified":{"type":"string","format":"date","description":"Workspace last modify date"},"who_created":{"type":"string","description":"Created by"},"who_last_modified":{"type":"string","description":"Last modified by"}}}}},"500":{"description":"Error returning workspaces for project"}},"x-code-samples":[{"lang":"shell","source":"curl --request GET \\\n  --url http://undefinedundefined/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces"},{"lang":"node","source":"var request = require(\"request\");\n\nvar options = {\n  method: 'GET',\n  url: 'http://undefinedundefined/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces'\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"},{"lang":"php","source":"<?php\n\n$request = new HttpRequest();\n$request->setUrl('http://undefinedundefined/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces');\n$request->setMethod(HTTP_METH_GET);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"},{"lang":"java","source":"HttpResponse<String> response = Unirest.get(\"http://undefinedundefined/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces\")\n  .asString();"},{"lang":"go","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"http://undefinedundefined/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"python","source":"import http.client\n\nconn = http.client.HTTPConnection(\"undefinedundefined\")\n\nconn.request(\"GET\", \"/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces\")\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"csharp","source":"var client = new RestClient(\"http://undefinedundefined/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces\");\nvar request = new RestRequest(Method.GET);\nIRestResponse response = client.Execute(request);"},{"lang":"ruby","source":"require 'uri'\nrequire 'net/http'\n\nurl = URI(\"http://undefinedundefined/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces\")\n\nhttp = Net::HTTP.new(url.host, url.port)\n\nrequest = Net::HTTP::Get.new(url)\n\nresponse = http.request(request)\nputs response.read_body"}]},"post":{"summary":"Create a workspace in a project","tags":["Workspaces"],"parameters":[{"$ref":"#/parameters/orgId"},{"$ref":"#/parameters/projectId"},{"$ref":"#/parameters/authorization"},{"$ref":"#/parameters/x-api-key"},{"name":"body","in":"body","schema":{"type":"object","required":["name"],"properties":{"name":{"type":"string"},"title":{"type":"string"},"description":{"type":"string"}}},"description":"New workspace info","required":true}],"responses":{"201":{"description":"Create workspace success","schema":{"type":"object","properties":{"projectId":{"type":"string","description":"Project id"},"workspaceId":{"type":"string","description":"Workspace id"}}}},"500":{"description":"Error creating workspace"}},"x-code-samples":[{"lang":"shell","source":"curl --request POST \\\n  --url http://undefinedundefined/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces \\\n  --data '{\"name\":\"string\",\"title\":\"string\",\"description\":\"string\"}'"},{"lang":"node","source":"var request = require(\"request\");\n\nvar options = {\n  method: 'POST',\n  url: 'http://undefinedundefined/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces',\n  body: {name: 'string', title: 'string', description: 'string'},\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"},{"lang":"php","source":"<?php\n\n$request = new HttpRequest();\n$request->setUrl('http://undefinedundefined/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setBody('{\"name\":\"string\",\"title\":\"string\",\"description\":\"string\"}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"},{"lang":"java","source":"HttpResponse<String> response = Unirest.post(\"http://undefinedundefined/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces\")\n  .body(\"{\\\"name\\\":\\\"string\\\",\\\"title\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\"}\")\n  .asString();"},{"lang":"go","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"http://undefinedundefined/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces\"\n\n\tpayload := strings.NewReader(\"{\\\"name\\\":\\\"string\\\",\\\"title\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\"}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"python","source":"import http.client\n\nconn = http.client.HTTPConnection(\"undefinedundefined\")\n\npayload = \"{\\\"name\\\":\\\"string\\\",\\\"title\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\"}\"\n\nconn.request(\"POST\", \"/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces\", payload)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"csharp","source":"var client = new RestClient(\"http://undefinedundefined/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces\");\nvar request = new RestRequest(Method.POST);\nrequest.AddParameter(\"undefined\", \"{\\\"name\\\":\\\"string\\\",\\\"title\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\"}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"},{"lang":"ruby","source":"require 'uri'\nrequire 'net/http'\n\nurl = URI(\"http://undefinedundefined/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces\")\n\nhttp = Net::HTTP.new(url.host, url.port)\n\nrequest = Net::HTTP::Post.new(url)\nrequest.body = \"{\\\"name\\\":\\\"string\\\",\\\"title\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\"}\"\n\nresponse = http.request(request)\nputs response.read_body"}]}},"/api/organizations/{orgId}/projects/{projectId}":{"delete":{"summary":"Delete a project","tags":["Projects"],"parameters":[{"$ref":"#/parameters/orgId"},{"$ref":"#/parameters/projectId"},{"$ref":"#/parameters/authorization"},{"$ref":"#/parameters/x-api-key"}],"responses":{"200":{"description":"Delete project success"},"500":{"description":"Error deleting project"}},"x-code-samples":[{"lang":"shell","source":"curl --request DELETE \\\n  --url http://undefinedundefined/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D"},{"lang":"node","source":"var request = require(\"request\");\n\nvar options = {\n  method: 'DELETE',\n  url: 'http://undefinedundefined/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D'\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"},{"lang":"php","source":"<?php\n\n$request = new HttpRequest();\n$request->setUrl('http://undefinedundefined/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D');\n$request->setMethod(HTTP_METH_DELETE);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"},{"lang":"java","source":"HttpResponse<String> response = Unirest.delete(\"http://undefinedundefined/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D\")\n  .asString();"},{"lang":"go","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"http://undefinedundefined/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D\"\n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"python","source":"import http.client\n\nconn = http.client.HTTPConnection(\"undefinedundefined\")\n\nconn.request(\"DELETE\", \"/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D\")\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"csharp","source":"var client = new RestClient(\"http://undefinedundefined/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D\");\nvar request = new RestRequest(Method.DELETE);\nIRestResponse response = client.Execute(request);"},{"lang":"ruby","source":"require 'uri'\nrequire 'net/http'\n\nurl = URI(\"http://undefinedundefined/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\n\nrequest = Net::HTTP::Delete.new(url)\n\nresponse = http.request(request)\nputs response.read_body"}]},"patch":{"summary":"Edit a project","tags":["Projects"],"parameters":[{"$ref":"#/parameters/orgId"},{"$ref":"#/parameters/projectId"},{"$ref":"#/parameters/authorization"},{"$ref":"#/parameters/x-api-key"},{"name":"body","in":"body","required":true,"schema":{"type":"object","required":["name","title"],"properties":{"name":{"type":"string"},"title":{"type":"string"},"description":{"type":"string"}}},"description":"New project info"}],"responses":{"200":{"description":"Edit project success"},"500":{"description":"Error editing project"}},"x-code-samples":[{"lang":"shell","source":"curl --request PATCH \\\n  --url http://undefinedundefined/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D \\\n  --data '{\"name\":\"string\",\"title\":\"string\",\"description\":\"string\"}'"},{"lang":"node","source":"var request = require(\"request\");\n\nvar options = {\n  method: 'PATCH',\n  url: 'http://undefinedundefined/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D',\n  body: {name: 'string', title: 'string', description: 'string'},\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"},{"lang":"php","source":"<?php\n\nHttpRequest::methodRegister('PATCH');\n$request = new HttpRequest();\n$request->setUrl('http://undefinedundefined/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D');\n$request->setMethod(HttpRequest::HTTP_METH_PATCH);\n\n$request->setBody('{\"name\":\"string\",\"title\":\"string\",\"description\":\"string\"}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"},{"lang":"java","source":"HttpResponse<String> response = Unirest.patch(\"http://undefinedundefined/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D\")\n  .body(\"{\\\"name\\\":\\\"string\\\",\\\"title\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\"}\")\n  .asString();"},{"lang":"go","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"http://undefinedundefined/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D\"\n\n\tpayload := strings.NewReader(\"{\\\"name\\\":\\\"string\\\",\\\"title\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\"}\")\n\n\treq, _ := http.NewRequest(\"PATCH\", url, payload)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"python","source":"import http.client\n\nconn = http.client.HTTPConnection(\"undefinedundefined\")\n\npayload = \"{\\\"name\\\":\\\"string\\\",\\\"title\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\"}\"\n\nconn.request(\"PATCH\", \"/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D\", payload)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"csharp","source":"var client = new RestClient(\"http://undefinedundefined/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D\");\nvar request = new RestRequest(Method.PATCH);\nrequest.AddParameter(\"undefined\", \"{\\\"name\\\":\\\"string\\\",\\\"title\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\"}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"},{"lang":"ruby","source":"require 'uri'\nrequire 'net/http'\n\nurl = URI(\"http://undefinedundefined/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\n\nrequest = Net::HTTP::Patch.new(url)\nrequest.body = \"{\\\"name\\\":\\\"string\\\",\\\"title\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\"}\"\n\nresponse = http.request(request)\nputs response.read_body"}]},"get":{"summary":"View a project by its ID","tags":["Projects"],"parameters":[{"$ref":"#/parameters/orgId"},{"$ref":"#/parameters/projectId"},{"$ref":"#/parameters/authorization"},{"$ref":"#/parameters/x-api-key"}],"responses":{"200":{"description":"Found project","schema":{"type":"object","properties":{"id":{"type":"string","description":"Project id"},"name":{"type":"string","description":"Project name"},"description":{"type":"string","description":"Project description"},"type":{"type":"string","description":"Project type"},"enabled":{"type":"boolean","description":"Is project enabled"},"deleted":{"type":"boolean","description":"Is project deleted"},"title":{"type":"string","description":"Project title"},"org_id":{"type":"string","description":"Org id"},"date_created":{"type":"string","format":"date","description":"Project create date"},"date_last_modified":{"type":"string","format":"date","description":"Project last modify date"},"who_created":{"type":"string","description":"Created by"},"who_last_modified":{"type":"string","description":"Last modified by"}}}},"500":{"description":"Error getting project"}},"x-code-samples":[{"lang":"shell","source":"curl --request GET \\\n  --url http://undefinedundefined/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D"},{"lang":"node","source":"var request = require(\"request\");\n\nvar options = {\n  method: 'GET',\n  url: 'http://undefinedundefined/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D'\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"},{"lang":"php","source":"<?php\n\n$request = new HttpRequest();\n$request->setUrl('http://undefinedundefined/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D');\n$request->setMethod(HTTP_METH_GET);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"},{"lang":"java","source":"HttpResponse<String> response = Unirest.get(\"http://undefinedundefined/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D\")\n  .asString();"},{"lang":"go","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"http://undefinedundefined/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"python","source":"import http.client\n\nconn = http.client.HTTPConnection(\"undefinedundefined\")\n\nconn.request(\"GET\", \"/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D\")\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"csharp","source":"var client = new RestClient(\"http://undefinedundefined/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D\");\nvar request = new RestRequest(Method.GET);\nIRestResponse response = client.Execute(request);"},{"lang":"ruby","source":"require 'uri'\nrequire 'net/http'\n\nurl = URI(\"http://undefinedundefined/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\n\nrequest = Net::HTTP::Get.new(url)\n\nresponse = http.request(request)\nputs response.read_body"}]}},"/api/organizations/{orgId}/projects/{projectId}/workspaces/{workspaceId}":{"patch":{"summary":"Edit a workspace","tags":["Workspaces"],"parameters":[{"$ref":"#/parameters/orgId"},{"$ref":"#/parameters/projectId"},{"$ref":"#/parameters/workspaceId"},{"$ref":"#/parameters/authorization"},{"$ref":"#/parameters/x-api-key"},{"name":"body","in":"body","required":true,"schema":{"type":"object","required":["name"],"properties":{"name":{"type":"string"},"title":{"type":"string"},"whoLastModified":{"type":"string"},"description":{"type":"string"}}},"description":"New workspace info"}],"responses":{"200":{"description":"Edit workspace success"},"500":{"description":"Error editing workspace"}},"x-code-samples":[{"lang":"shell","source":"curl --request PATCH \\\n  --url http://undefinedundefined/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D \\\n  --data '{\"name\":\"string\",\"title\":\"string\",\"whoLastModified\":\"string\",\"description\":\"string\"}'"},{"lang":"node","source":"var request = require(\"request\");\n\nvar options = {\n  method: 'PATCH',\n  url: 'http://undefinedundefined/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D',\n  body: {\n    name: 'string',\n    title: 'string',\n    whoLastModified: 'string',\n    description: 'string'\n  },\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"},{"lang":"php","source":"<?php\n\nHttpRequest::methodRegister('PATCH');\n$request = new HttpRequest();\n$request->setUrl('http://undefinedundefined/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D');\n$request->setMethod(HttpRequest::HTTP_METH_PATCH);\n\n$request->setBody('{\"name\":\"string\",\"title\":\"string\",\"whoLastModified\":\"string\",\"description\":\"string\"}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"},{"lang":"java","source":"HttpResponse<String> response = Unirest.patch(\"http://undefinedundefined/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D\")\n  .body(\"{\\\"name\\\":\\\"string\\\",\\\"title\\\":\\\"string\\\",\\\"whoLastModified\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\"}\")\n  .asString();"},{"lang":"go","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"http://undefinedundefined/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D\"\n\n\tpayload := strings.NewReader(\"{\\\"name\\\":\\\"string\\\",\\\"title\\\":\\\"string\\\",\\\"whoLastModified\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\"}\")\n\n\treq, _ := http.NewRequest(\"PATCH\", url, payload)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"python","source":"import http.client\n\nconn = http.client.HTTPConnection(\"undefinedundefined\")\n\npayload = \"{\\\"name\\\":\\\"string\\\",\\\"title\\\":\\\"string\\\",\\\"whoLastModified\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\"}\"\n\nconn.request(\"PATCH\", \"/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D\", payload)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"csharp","source":"var client = new RestClient(\"http://undefinedundefined/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D\");\nvar request = new RestRequest(Method.PATCH);\nrequest.AddParameter(\"undefined\", \"{\\\"name\\\":\\\"string\\\",\\\"title\\\":\\\"string\\\",\\\"whoLastModified\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\"}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"},{"lang":"ruby","source":"require 'uri'\nrequire 'net/http'\n\nurl = URI(\"http://undefinedundefined/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\n\nrequest = Net::HTTP::Patch.new(url)\nrequest.body = \"{\\\"name\\\":\\\"string\\\",\\\"title\\\":\\\"string\\\",\\\"whoLastModified\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\"}\"\n\nresponse = http.request(request)\nputs response.read_body"}]},"get":{"summary":"View workspace details by ID","tags":["Workspaces"],"parameters":[{"$ref":"#/parameters/orgId"},{"$ref":"#/parameters/projectId"},{"$ref":"#/parameters/workspaceId"},{"$ref":"#/parameters/authorization"},{"$ref":"#/parameters/x-api-key"}],"responses":{"200":{"description":"Found workspace","schema":{"type":"object","properties":{"id":{"type":"string","description":"Workspace id"},"name":{"type":"string","description":"Workspace name"},"title":{"type":"string","description":"Workspace title"},"description":{"type":"string","description":"Workspace description"},"quota_usage":{"type":"string","description":"Quota usage for workspace"},"enabled":{"type":"boolean","description":"Is project enabled"},"runtime_enabled":{"type":"boolean","description":"Is runtime enabled"},"date_created":{"type":"string","format":"date","description":"Workspace create date"},"date_last_modified":{"type":"string","format":"date","description":"Workspace last modify date"},"who_created":{"type":"string","description":"Created by"},"who_last_modified":{"type":"string","description":"Last modified by"}}}},"500":{"description":"Error getting workspace"}},"x-code-samples":[{"lang":"shell","source":"curl --request GET \\\n  --url http://undefinedundefined/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D"},{"lang":"node","source":"var request = require(\"request\");\n\nvar options = {\n  method: 'GET',\n  url: 'http://undefinedundefined/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D'\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"},{"lang":"php","source":"<?php\n\n$request = new HttpRequest();\n$request->setUrl('http://undefinedundefined/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D');\n$request->setMethod(HTTP_METH_GET);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"},{"lang":"java","source":"HttpResponse<String> response = Unirest.get(\"http://undefinedundefined/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D\")\n  .asString();"},{"lang":"go","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"http://undefinedundefined/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"python","source":"import http.client\n\nconn = http.client.HTTPConnection(\"undefinedundefined\")\n\nconn.request(\"GET\", \"/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D\")\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"csharp","source":"var client = new RestClient(\"http://undefinedundefined/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D\");\nvar request = new RestRequest(Method.GET);\nIRestResponse response = client.Execute(request);"},{"lang":"ruby","source":"require 'uri'\nrequire 'net/http'\n\nurl = URI(\"http://undefinedundefined/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\n\nrequest = Net::HTTP::Get.new(url)\n\nresponse = http.request(request)\nputs response.read_body"}]},"delete":{"summary":"Delete a workspace","tags":["Workspaces"],"parameters":[{"$ref":"#/parameters/orgId"},{"$ref":"#/parameters/projectId"},{"$ref":"#/parameters/workspaceId"},{"$ref":"#/parameters/authorization"},{"$ref":"#/parameters/x-api-key"}],"responses":{"200":{"description":"Delete workspace success"},"500":{"description":"Error deleting workspace"}},"x-code-samples":[{"lang":"shell","source":"curl --request DELETE \\\n  --url http://undefinedundefined/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D"},{"lang":"node","source":"var request = require(\"request\");\n\nvar options = {\n  method: 'DELETE',\n  url: 'http://undefinedundefined/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D'\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"},{"lang":"php","source":"<?php\n\n$request = new HttpRequest();\n$request->setUrl('http://undefinedundefined/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D');\n$request->setMethod(HTTP_METH_DELETE);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"},{"lang":"java","source":"HttpResponse<String> response = Unirest.delete(\"http://undefinedundefined/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D\")\n  .asString();"},{"lang":"go","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"http://undefinedundefined/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D\"\n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"python","source":"import http.client\n\nconn = http.client.HTTPConnection(\"undefinedundefined\")\n\nconn.request(\"DELETE\", \"/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D\")\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"csharp","source":"var client = new RestClient(\"http://undefinedundefined/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D\");\nvar request = new RestRequest(Method.DELETE);\nIRestResponse response = client.Execute(request);"},{"lang":"ruby","source":"require 'uri'\nrequire 'net/http'\n\nurl = URI(\"http://undefinedundefined/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\n\nrequest = Net::HTTP::Delete.new(url)\n\nresponse = http.request(request)\nputs response.read_body"}]}},"/api/organizations/{orgId}/projects/{projectId}/workspaces/{workspaceId}/plugins":{"get":{"summary":"List plugins for a workspace","tags":["Workspaces"],"parameters":[{"$ref":"#/parameters/orgId"},{"$ref":"#/parameters/projectId"},{"$ref":"#/parameters/workspaceId"},{"$ref":"#/parameters/authorization"},{"$ref":"#/parameters/x-api-key"}],"responses":{"200":{"description":"Return list of plugins","schema":{"type":"array","items":{"type":"object","properties":{"id_workspace":{"type":"string","description":"Workspace id"},"id_plugin":{"type":"string","description":"Plugin id"}}}}},"500":{"description":"Error getting plugins for workspace"}},"x-code-samples":[{"lang":"shell","source":"curl --request GET \\\n  --url http://undefinedundefined/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/plugins"},{"lang":"node","source":"var request = require(\"request\");\n\nvar options = {\n  method: 'GET',\n  url: 'http://undefinedundefined/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/plugins'\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"},{"lang":"php","source":"<?php\n\n$request = new HttpRequest();\n$request->setUrl('http://undefinedundefined/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/plugins');\n$request->setMethod(HTTP_METH_GET);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"},{"lang":"java","source":"HttpResponse<String> response = Unirest.get(\"http://undefinedundefined/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/plugins\")\n  .asString();"},{"lang":"go","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"http://undefinedundefined/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/plugins\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"python","source":"import http.client\n\nconn = http.client.HTTPConnection(\"undefinedundefined\")\n\nconn.request(\"GET\", \"/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/plugins\")\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"csharp","source":"var client = new RestClient(\"http://undefinedundefined/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/plugins\");\nvar request = new RestRequest(Method.GET);\nIRestResponse response = client.Execute(request);"},{"lang":"ruby","source":"require 'uri'\nrequire 'net/http'\n\nurl = URI(\"http://undefinedundefined/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/plugins\")\n\nhttp = Net::HTTP.new(url.host, url.port)\n\nrequest = Net::HTTP::Get.new(url)\n\nresponse = http.request(request)\nputs response.read_body"}]}},"/api/organizations/{orgId}/projects/{projectId}/workspaces/{workspaceId}/credentials":{"get":{"summary":"List credentials for a workspace","tags":["Workspaces"],"parameters":[{"$ref":"#/parameters/orgId"},{"$ref":"#/parameters/projectId"},{"$ref":"#/parameters/workspaceId"},{"$ref":"#/parameters/authorization"},{"$ref":"#/parameters/x-api-key"}],"responses":{"200":{"description":"Return list of credentials","schema":{"type":"array","items":{"type":"object","properties":{"id_workspace":{"type":"string","description":"Workspace id"},"id_credential":{"type":"string","description":"Credential id"},"flow_type":{"type":"string","description":"Flow type"},"credential_type":{"type":"string","description":"Credential type"}}}}},"500":{"description":"Error getting credentials for workspace"}},"x-code-samples":[{"lang":"shell","source":"curl --request GET \\\n  --url http://undefinedundefined/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/credentials"},{"lang":"node","source":"var request = require(\"request\");\n\nvar options = {\n  method: 'GET',\n  url: 'http://undefinedundefined/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/credentials'\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"},{"lang":"php","source":"<?php\n\n$request = new HttpRequest();\n$request->setUrl('http://undefinedundefined/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/credentials');\n$request->setMethod(HTTP_METH_GET);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"},{"lang":"java","source":"HttpResponse<String> response = Unirest.get(\"http://undefinedundefined/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/credentials\")\n  .asString();"},{"lang":"go","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"http://undefinedundefined/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/credentials\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"python","source":"import http.client\n\nconn = http.client.HTTPConnection(\"undefinedundefined\")\n\nconn.request(\"GET\", \"/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/credentials\")\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"csharp","source":"var client = new RestClient(\"http://undefinedundefined/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/credentials\");\nvar request = new RestRequest(Method.GET);\nIRestResponse response = client.Execute(request);"},{"lang":"ruby","source":"require 'uri'\nrequire 'net/http'\n\nurl = URI(\"http://undefinedundefined/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/credentials\")\n\nhttp = Net::HTTP.new(url.host, url.port)\n\nrequest = Net::HTTP::Get.new(url)\n\nresponse = http.request(request)\nputs response.read_body"}]}},"/api/organizations/{orgId}/projects/{projectId}/workspaces/{workspaceId}/credentials/entp":{"post":{"summary":"Create enterprise credential","tags":["Workspaces"],"consumes":["multipart/form-data"],"parameters":[{"$ref":"#/parameters/orgId"},{"$ref":"#/parameters/projectId"},{"$ref":"#/parameters/workspaceId"},{"$ref":"#/parameters/authorization"},{"$ref":"#/parameters/x-api-key"},{"name":"body","in":"body","required":true,"schema":{"type":"object","properties":{"certificate":{"description":"Credential certificate","type":"string","format":"binary"}},"required":["certificate"]},"x-s2o-overloaded":true}],"responses":{"200":{"description":"Return enterprise credential details","schema":{"type":"array","items":{"type":"object","properties":{"id":{"type":"string","description":"Credential id"},"apiKey":{"type":"string","description":"Credential API Key"},"orgId":{"type":"string","description":"IMS Org ID"}}}}},"500":{"description":"Error creating enterprise credential for workspace"}},"x-code-samples":[{"lang":"shell","source":"curl --request POST \\\n  --url http://undefinedundefined/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/credentials/entp \\\n  --header 'accept: multipart/form-data' \\\n  --data '{\"certificate\":\"string\"}'"},{"lang":"node","source":"var request = require(\"request\");\n\nvar options = {\n  method: 'POST',\n  url: 'http://undefinedundefined/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/credentials/entp',\n  headers: {accept: 'multipart/form-data'},\n  body: {certificate: 'string'},\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"},{"lang":"php","source":"<?php\n\n$request = new HttpRequest();\n$request->setUrl('http://undefinedundefined/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/credentials/entp');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders(array(\n  'accept' => 'multipart/form-data'\n));\n\n$request->setBody('{\"certificate\":\"string\"}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"},{"lang":"java","source":"HttpResponse<String> response = Unirest.post(\"http://undefinedundefined/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/credentials/entp\")\n  .header(\"accept\", \"multipart/form-data\")\n  .body(\"{\\\"certificate\\\":\\\"string\\\"}\")\n  .asString();"},{"lang":"go","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"http://undefinedundefined/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/credentials/entp\"\n\n\tpayload := strings.NewReader(\"{\\\"certificate\\\":\\\"string\\\"}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"accept\", \"multipart/form-data\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"python","source":"import http.client\n\nconn = http.client.HTTPConnection(\"undefinedundefined\")\n\npayload = \"{\\\"certificate\\\":\\\"string\\\"}\"\n\nheaders = { 'accept': \"multipart/form-data\" }\n\nconn.request(\"POST\", \"/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/credentials/entp\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"csharp","source":"var client = new RestClient(\"http://undefinedundefined/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/credentials/entp\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"accept\", \"multipart/form-data\");\nrequest.AddParameter(\"undefined\", \"{\\\"certificate\\\":\\\"string\\\"}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"},{"lang":"ruby","source":"require 'uri'\nrequire 'net/http'\n\nurl = URI(\"http://undefinedundefined/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/credentials/entp\")\n\nhttp = Net::HTTP.new(url.host, url.port)\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"accept\"] = 'multipart/form-data'\nrequest.body = \"{\\\"certificate\\\":\\\"string\\\"}\"\n\nresponse = http.request(request)\nputs response.read_body"}],"x-s2o-warning":"Operation post:api/organizations/{orgId}/projects/{projectId}/workspaces/{workspaceId}/credentials/entp has multiple requestBodies"}},"/api/organizations/{orgId}/projects/{projectId}/workspaces/{workspaceId}/credentials/analytics":{"post":{"summary":"Create analytics credential","tags":["Workspaces"],"parameters":[{"$ref":"#/parameters/orgId"},{"$ref":"#/parameters/projectId"},{"$ref":"#/parameters/workspaceId"},{"$ref":"#/parameters/authorization"},{"$ref":"#/parameters/x-api-key"},{"name":"body","in":"body","schema":{"$ref":"#/definitions/Adobeid"},"description":"Analytics credential object","required":true}],"responses":{"200":{"description":"Return analytics credential details","schema":{"type":"array","items":{"type":"object","properties":{"id":{"type":"string","description":"Credential id"},"apiKey":{"type":"string","description":"Credential API Key"},"orgId":{"type":"string","description":"IMS Org ID"}}}}},"500":{"description":"Error creating analytics credential for workspace"}},"x-code-samples":[{"lang":"shell","source":"curl --request POST \\\n  --url http://undefinedundefined/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/credentials/analytics \\\n  --data '{\"name\":\"string\",\"description\":\"string\",\"platform\":\"string\",\"urlScheme\":\"string\",\"redirectUriList\":[\"string\"],\"defaultRedirectUri\":\"string\",\"domain\":\"string\",\"approvalInfo\":{\"websiteUrl\":\"string\",\"companyWebsiteUrl\":\"string\",\"integrationWebsiteUrl\":\"string\",\"contactEmail\":\"string\",\"integrationDescription\":\"string\",\"descriptionTypekit\":\"string\",\"descriptionCCStorage\":\"string\",\"otherCreativeSDK\":\"string\",\"domain\":\"string\",\"sdkComponents\":[\"string\"],\"requestState\":\"string\",\"requestStateList\":[{\"rejectReasons\":\"string\",\"requestState\":\"string\",\"created\":\"string\",\"comments\":\"string\"}]}}'"},{"lang":"node","source":"var request = require(\"request\");\n\nvar options = {\n  method: 'POST',\n  url: 'http://undefinedundefined/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/credentials/analytics',\n  body: {\n    name: 'string',\n    description: 'string',\n    platform: 'string',\n    urlScheme: 'string',\n    redirectUriList: ['string'],\n    defaultRedirectUri: 'string',\n    domain: 'string',\n    approvalInfo: {\n      websiteUrl: 'string',\n      companyWebsiteUrl: 'string',\n      integrationWebsiteUrl: 'string',\n      contactEmail: 'string',\n      integrationDescription: 'string',\n      descriptionTypekit: 'string',\n      descriptionCCStorage: 'string',\n      otherCreativeSDK: 'string',\n      domain: 'string',\n      sdkComponents: ['string'],\n      requestState: 'string',\n      requestStateList: [\n        {\n          rejectReasons: 'string',\n          requestState: 'string',\n          created: 'string',\n          comments: 'string'\n        }\n      ]\n    }\n  },\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"},{"lang":"php","source":"<?php\n\n$request = new HttpRequest();\n$request->setUrl('http://undefinedundefined/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/credentials/analytics');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setBody('{\"name\":\"string\",\"description\":\"string\",\"platform\":\"string\",\"urlScheme\":\"string\",\"redirectUriList\":[\"string\"],\"defaultRedirectUri\":\"string\",\"domain\":\"string\",\"approvalInfo\":{\"websiteUrl\":\"string\",\"companyWebsiteUrl\":\"string\",\"integrationWebsiteUrl\":\"string\",\"contactEmail\":\"string\",\"integrationDescription\":\"string\",\"descriptionTypekit\":\"string\",\"descriptionCCStorage\":\"string\",\"otherCreativeSDK\":\"string\",\"domain\":\"string\",\"sdkComponents\":[\"string\"],\"requestState\":\"string\",\"requestStateList\":[{\"rejectReasons\":\"string\",\"requestState\":\"string\",\"created\":\"string\",\"comments\":\"string\"}]}}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"},{"lang":"java","source":"HttpResponse<String> response = Unirest.post(\"http://undefinedundefined/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/credentials/analytics\")\n  .body(\"{\\\"name\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"platform\\\":\\\"string\\\",\\\"urlScheme\\\":\\\"string\\\",\\\"redirectUriList\\\":[\\\"string\\\"],\\\"defaultRedirectUri\\\":\\\"string\\\",\\\"domain\\\":\\\"string\\\",\\\"approvalInfo\\\":{\\\"websiteUrl\\\":\\\"string\\\",\\\"companyWebsiteUrl\\\":\\\"string\\\",\\\"integrationWebsiteUrl\\\":\\\"string\\\",\\\"contactEmail\\\":\\\"string\\\",\\\"integrationDescription\\\":\\\"string\\\",\\\"descriptionTypekit\\\":\\\"string\\\",\\\"descriptionCCStorage\\\":\\\"string\\\",\\\"otherCreativeSDK\\\":\\\"string\\\",\\\"domain\\\":\\\"string\\\",\\\"sdkComponents\\\":[\\\"string\\\"],\\\"requestState\\\":\\\"string\\\",\\\"requestStateList\\\":[{\\\"rejectReasons\\\":\\\"string\\\",\\\"requestState\\\":\\\"string\\\",\\\"created\\\":\\\"string\\\",\\\"comments\\\":\\\"string\\\"}]}}\")\n  .asString();"},{"lang":"go","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"http://undefinedundefined/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/credentials/analytics\"\n\n\tpayload := strings.NewReader(\"{\\\"name\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"platform\\\":\\\"string\\\",\\\"urlScheme\\\":\\\"string\\\",\\\"redirectUriList\\\":[\\\"string\\\"],\\\"defaultRedirectUri\\\":\\\"string\\\",\\\"domain\\\":\\\"string\\\",\\\"approvalInfo\\\":{\\\"websiteUrl\\\":\\\"string\\\",\\\"companyWebsiteUrl\\\":\\\"string\\\",\\\"integrationWebsiteUrl\\\":\\\"string\\\",\\\"contactEmail\\\":\\\"string\\\",\\\"integrationDescription\\\":\\\"string\\\",\\\"descriptionTypekit\\\":\\\"string\\\",\\\"descriptionCCStorage\\\":\\\"string\\\",\\\"otherCreativeSDK\\\":\\\"string\\\",\\\"domain\\\":\\\"string\\\",\\\"sdkComponents\\\":[\\\"string\\\"],\\\"requestState\\\":\\\"string\\\",\\\"requestStateList\\\":[{\\\"rejectReasons\\\":\\\"string\\\",\\\"requestState\\\":\\\"string\\\",\\\"created\\\":\\\"string\\\",\\\"comments\\\":\\\"string\\\"}]}}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"python","source":"import http.client\n\nconn = http.client.HTTPConnection(\"undefinedundefined\")\n\npayload = \"{\\\"name\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"platform\\\":\\\"string\\\",\\\"urlScheme\\\":\\\"string\\\",\\\"redirectUriList\\\":[\\\"string\\\"],\\\"defaultRedirectUri\\\":\\\"string\\\",\\\"domain\\\":\\\"string\\\",\\\"approvalInfo\\\":{\\\"websiteUrl\\\":\\\"string\\\",\\\"companyWebsiteUrl\\\":\\\"string\\\",\\\"integrationWebsiteUrl\\\":\\\"string\\\",\\\"contactEmail\\\":\\\"string\\\",\\\"integrationDescription\\\":\\\"string\\\",\\\"descriptionTypekit\\\":\\\"string\\\",\\\"descriptionCCStorage\\\":\\\"string\\\",\\\"otherCreativeSDK\\\":\\\"string\\\",\\\"domain\\\":\\\"string\\\",\\\"sdkComponents\\\":[\\\"string\\\"],\\\"requestState\\\":\\\"string\\\",\\\"requestStateList\\\":[{\\\"rejectReasons\\\":\\\"string\\\",\\\"requestState\\\":\\\"string\\\",\\\"created\\\":\\\"string\\\",\\\"comments\\\":\\\"string\\\"}]}}\"\n\nconn.request(\"POST\", \"/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/credentials/analytics\", payload)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"csharp","source":"var client = new RestClient(\"http://undefinedundefined/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/credentials/analytics\");\nvar request = new RestRequest(Method.POST);\nrequest.AddParameter(\"undefined\", \"{\\\"name\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"platform\\\":\\\"string\\\",\\\"urlScheme\\\":\\\"string\\\",\\\"redirectUriList\\\":[\\\"string\\\"],\\\"defaultRedirectUri\\\":\\\"string\\\",\\\"domain\\\":\\\"string\\\",\\\"approvalInfo\\\":{\\\"websiteUrl\\\":\\\"string\\\",\\\"companyWebsiteUrl\\\":\\\"string\\\",\\\"integrationWebsiteUrl\\\":\\\"string\\\",\\\"contactEmail\\\":\\\"string\\\",\\\"integrationDescription\\\":\\\"string\\\",\\\"descriptionTypekit\\\":\\\"string\\\",\\\"descriptionCCStorage\\\":\\\"string\\\",\\\"otherCreativeSDK\\\":\\\"string\\\",\\\"domain\\\":\\\"string\\\",\\\"sdkComponents\\\":[\\\"string\\\"],\\\"requestState\\\":\\\"string\\\",\\\"requestStateList\\\":[{\\\"rejectReasons\\\":\\\"string\\\",\\\"requestState\\\":\\\"string\\\",\\\"created\\\":\\\"string\\\",\\\"comments\\\":\\\"string\\\"}]}}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"},{"lang":"ruby","source":"require 'uri'\nrequire 'net/http'\n\nurl = URI(\"http://undefinedundefined/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/credentials/analytics\")\n\nhttp = Net::HTTP.new(url.host, url.port)\n\nrequest = Net::HTTP::Post.new(url)\nrequest.body = \"{\\\"name\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"platform\\\":\\\"string\\\",\\\"urlScheme\\\":\\\"string\\\",\\\"redirectUriList\\\":[\\\"string\\\"],\\\"defaultRedirectUri\\\":\\\"string\\\",\\\"domain\\\":\\\"string\\\",\\\"approvalInfo\\\":{\\\"websiteUrl\\\":\\\"string\\\",\\\"companyWebsiteUrl\\\":\\\"string\\\",\\\"integrationWebsiteUrl\\\":\\\"string\\\",\\\"contactEmail\\\":\\\"string\\\",\\\"integrationDescription\\\":\\\"string\\\",\\\"descriptionTypekit\\\":\\\"string\\\",\\\"descriptionCCStorage\\\":\\\"string\\\",\\\"otherCreativeSDK\\\":\\\"string\\\",\\\"domain\\\":\\\"string\\\",\\\"sdkComponents\\\":[\\\"string\\\"],\\\"requestState\\\":\\\"string\\\",\\\"requestStateList\\\":[{\\\"rejectReasons\\\":\\\"string\\\",\\\"requestState\\\":\\\"string\\\",\\\"created\\\":\\\"string\\\",\\\"comments\\\":\\\"string\\\"}]}}\"\n\nresponse = http.request(request)\nputs response.read_body"}]}},"/api/organizations/{orgId}/projects/{projectId}/workspaces/{workspaceId}/credentials/adobeId":{"post":{"summary":"Create AdobeId credential","tags":["Workspaces"],"parameters":[{"$ref":"#/parameters/orgId"},{"$ref":"#/parameters/projectId"},{"$ref":"#/parameters/workspaceId"},{"$ref":"#/parameters/authorization"},{"$ref":"#/parameters/x-api-key"},{"name":"body","in":"body","schema":{"$ref":"#/definitions/Adobeid"},"description":"AdobeId credential object","required":true}],"responses":{"200":{"description":"Return adobeid credential details","schema":{"type":"array","items":{"type":"object","properties":{"id":{"type":"string","description":"Credential id"},"apiKey":{"type":"string","description":"Credential API Key"},"orgId":{"type":"string","description":"IMS Org ID"}}}}},"500":{"description":"Error creating adobeId credential for workspace"}},"x-code-samples":[{"lang":"shell","source":"curl --request POST \\\n  --url http://undefinedundefined/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/credentials/adobeId \\\n  --data '{\"name\":\"string\",\"description\":\"string\",\"platform\":\"string\",\"urlScheme\":\"string\",\"redirectUriList\":[\"string\"],\"defaultRedirectUri\":\"string\",\"domain\":\"string\",\"approvalInfo\":{\"websiteUrl\":\"string\",\"companyWebsiteUrl\":\"string\",\"integrationWebsiteUrl\":\"string\",\"contactEmail\":\"string\",\"integrationDescription\":\"string\",\"descriptionTypekit\":\"string\",\"descriptionCCStorage\":\"string\",\"otherCreativeSDK\":\"string\",\"domain\":\"string\",\"sdkComponents\":[\"string\"],\"requestState\":\"string\",\"requestStateList\":[{\"rejectReasons\":\"string\",\"requestState\":\"string\",\"created\":\"string\",\"comments\":\"string\"}]}}'"},{"lang":"node","source":"var request = require(\"request\");\n\nvar options = {\n  method: 'POST',\n  url: 'http://undefinedundefined/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/credentials/adobeId',\n  body: {\n    name: 'string',\n    description: 'string',\n    platform: 'string',\n    urlScheme: 'string',\n    redirectUriList: ['string'],\n    defaultRedirectUri: 'string',\n    domain: 'string',\n    approvalInfo: {\n      websiteUrl: 'string',\n      companyWebsiteUrl: 'string',\n      integrationWebsiteUrl: 'string',\n      contactEmail: 'string',\n      integrationDescription: 'string',\n      descriptionTypekit: 'string',\n      descriptionCCStorage: 'string',\n      otherCreativeSDK: 'string',\n      domain: 'string',\n      sdkComponents: ['string'],\n      requestState: 'string',\n      requestStateList: [\n        {\n          rejectReasons: 'string',\n          requestState: 'string',\n          created: 'string',\n          comments: 'string'\n        }\n      ]\n    }\n  },\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"},{"lang":"php","source":"<?php\n\n$request = new HttpRequest();\n$request->setUrl('http://undefinedundefined/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/credentials/adobeId');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setBody('{\"name\":\"string\",\"description\":\"string\",\"platform\":\"string\",\"urlScheme\":\"string\",\"redirectUriList\":[\"string\"],\"defaultRedirectUri\":\"string\",\"domain\":\"string\",\"approvalInfo\":{\"websiteUrl\":\"string\",\"companyWebsiteUrl\":\"string\",\"integrationWebsiteUrl\":\"string\",\"contactEmail\":\"string\",\"integrationDescription\":\"string\",\"descriptionTypekit\":\"string\",\"descriptionCCStorage\":\"string\",\"otherCreativeSDK\":\"string\",\"domain\":\"string\",\"sdkComponents\":[\"string\"],\"requestState\":\"string\",\"requestStateList\":[{\"rejectReasons\":\"string\",\"requestState\":\"string\",\"created\":\"string\",\"comments\":\"string\"}]}}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"},{"lang":"java","source":"HttpResponse<String> response = Unirest.post(\"http://undefinedundefined/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/credentials/adobeId\")\n  .body(\"{\\\"name\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"platform\\\":\\\"string\\\",\\\"urlScheme\\\":\\\"string\\\",\\\"redirectUriList\\\":[\\\"string\\\"],\\\"defaultRedirectUri\\\":\\\"string\\\",\\\"domain\\\":\\\"string\\\",\\\"approvalInfo\\\":{\\\"websiteUrl\\\":\\\"string\\\",\\\"companyWebsiteUrl\\\":\\\"string\\\",\\\"integrationWebsiteUrl\\\":\\\"string\\\",\\\"contactEmail\\\":\\\"string\\\",\\\"integrationDescription\\\":\\\"string\\\",\\\"descriptionTypekit\\\":\\\"string\\\",\\\"descriptionCCStorage\\\":\\\"string\\\",\\\"otherCreativeSDK\\\":\\\"string\\\",\\\"domain\\\":\\\"string\\\",\\\"sdkComponents\\\":[\\\"string\\\"],\\\"requestState\\\":\\\"string\\\",\\\"requestStateList\\\":[{\\\"rejectReasons\\\":\\\"string\\\",\\\"requestState\\\":\\\"string\\\",\\\"created\\\":\\\"string\\\",\\\"comments\\\":\\\"string\\\"}]}}\")\n  .asString();"},{"lang":"go","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"http://undefinedundefined/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/credentials/adobeId\"\n\n\tpayload := strings.NewReader(\"{\\\"name\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"platform\\\":\\\"string\\\",\\\"urlScheme\\\":\\\"string\\\",\\\"redirectUriList\\\":[\\\"string\\\"],\\\"defaultRedirectUri\\\":\\\"string\\\",\\\"domain\\\":\\\"string\\\",\\\"approvalInfo\\\":{\\\"websiteUrl\\\":\\\"string\\\",\\\"companyWebsiteUrl\\\":\\\"string\\\",\\\"integrationWebsiteUrl\\\":\\\"string\\\",\\\"contactEmail\\\":\\\"string\\\",\\\"integrationDescription\\\":\\\"string\\\",\\\"descriptionTypekit\\\":\\\"string\\\",\\\"descriptionCCStorage\\\":\\\"string\\\",\\\"otherCreativeSDK\\\":\\\"string\\\",\\\"domain\\\":\\\"string\\\",\\\"sdkComponents\\\":[\\\"string\\\"],\\\"requestState\\\":\\\"string\\\",\\\"requestStateList\\\":[{\\\"rejectReasons\\\":\\\"string\\\",\\\"requestState\\\":\\\"string\\\",\\\"created\\\":\\\"string\\\",\\\"comments\\\":\\\"string\\\"}]}}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"python","source":"import http.client\n\nconn = http.client.HTTPConnection(\"undefinedundefined\")\n\npayload = \"{\\\"name\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"platform\\\":\\\"string\\\",\\\"urlScheme\\\":\\\"string\\\",\\\"redirectUriList\\\":[\\\"string\\\"],\\\"defaultRedirectUri\\\":\\\"string\\\",\\\"domain\\\":\\\"string\\\",\\\"approvalInfo\\\":{\\\"websiteUrl\\\":\\\"string\\\",\\\"companyWebsiteUrl\\\":\\\"string\\\",\\\"integrationWebsiteUrl\\\":\\\"string\\\",\\\"contactEmail\\\":\\\"string\\\",\\\"integrationDescription\\\":\\\"string\\\",\\\"descriptionTypekit\\\":\\\"string\\\",\\\"descriptionCCStorage\\\":\\\"string\\\",\\\"otherCreativeSDK\\\":\\\"string\\\",\\\"domain\\\":\\\"string\\\",\\\"sdkComponents\\\":[\\\"string\\\"],\\\"requestState\\\":\\\"string\\\",\\\"requestStateList\\\":[{\\\"rejectReasons\\\":\\\"string\\\",\\\"requestState\\\":\\\"string\\\",\\\"created\\\":\\\"string\\\",\\\"comments\\\":\\\"string\\\"}]}}\"\n\nconn.request(\"POST\", \"/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/credentials/adobeId\", payload)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"csharp","source":"var client = new RestClient(\"http://undefinedundefined/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/credentials/adobeId\");\nvar request = new RestRequest(Method.POST);\nrequest.AddParameter(\"undefined\", \"{\\\"name\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"platform\\\":\\\"string\\\",\\\"urlScheme\\\":\\\"string\\\",\\\"redirectUriList\\\":[\\\"string\\\"],\\\"defaultRedirectUri\\\":\\\"string\\\",\\\"domain\\\":\\\"string\\\",\\\"approvalInfo\\\":{\\\"websiteUrl\\\":\\\"string\\\",\\\"companyWebsiteUrl\\\":\\\"string\\\",\\\"integrationWebsiteUrl\\\":\\\"string\\\",\\\"contactEmail\\\":\\\"string\\\",\\\"integrationDescription\\\":\\\"string\\\",\\\"descriptionTypekit\\\":\\\"string\\\",\\\"descriptionCCStorage\\\":\\\"string\\\",\\\"otherCreativeSDK\\\":\\\"string\\\",\\\"domain\\\":\\\"string\\\",\\\"sdkComponents\\\":[\\\"string\\\"],\\\"requestState\\\":\\\"string\\\",\\\"requestStateList\\\":[{\\\"rejectReasons\\\":\\\"string\\\",\\\"requestState\\\":\\\"string\\\",\\\"created\\\":\\\"string\\\",\\\"comments\\\":\\\"string\\\"}]}}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"},{"lang":"ruby","source":"require 'uri'\nrequire 'net/http'\n\nurl = URI(\"http://undefinedundefined/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/credentials/adobeId\")\n\nhttp = Net::HTTP.new(url.host, url.port)\n\nrequest = Net::HTTP::Post.new(url)\nrequest.body = \"{\\\"name\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"platform\\\":\\\"string\\\",\\\"urlScheme\\\":\\\"string\\\",\\\"redirectUriList\\\":[\\\"string\\\"],\\\"defaultRedirectUri\\\":\\\"string\\\",\\\"domain\\\":\\\"string\\\",\\\"approvalInfo\\\":{\\\"websiteUrl\\\":\\\"string\\\",\\\"companyWebsiteUrl\\\":\\\"string\\\",\\\"integrationWebsiteUrl\\\":\\\"string\\\",\\\"contactEmail\\\":\\\"string\\\",\\\"integrationDescription\\\":\\\"string\\\",\\\"descriptionTypekit\\\":\\\"string\\\",\\\"descriptionCCStorage\\\":\\\"string\\\",\\\"otherCreativeSDK\\\":\\\"string\\\",\\\"domain\\\":\\\"string\\\",\\\"sdkComponents\\\":[\\\"string\\\"],\\\"requestState\\\":\\\"string\\\",\\\"requestStateList\\\":[{\\\"rejectReasons\\\":\\\"string\\\",\\\"requestState\\\":\\\"string\\\",\\\"created\\\":\\\"string\\\",\\\"comments\\\":\\\"string\\\"}]}}\"\n\nresponse = http.request(request)\nputs response.read_body"}]}},"/api/organizations/{orgId}/projects/{projectId}/workspaces/{workspaceId}/credentials/{integrationType}/{credentialId}/services":{"put":{"summary":"Subscribe credential to services","tags":["Workspaces"],"parameters":[{"$ref":"#/parameters/orgId"},{"$ref":"#/parameters/projectId"},{"$ref":"#/parameters/workspaceId"},{"name":"integrationType","description":"Integration Type","in":"path","required":true,"type":"string"},{"name":"credentialId","description":"ID of credential","in":"path","required":true,"type":"string"},{"$ref":"#/parameters/authorization"},{"$ref":"#/parameters/x-api-key"},{"name":"body","in":"body","schema":{"$ref":"#/definitions/SubscribeToServices"},"description":"SDK codes to add to credential"}],"responses":{"200":{"description":"List of services credential is subscribed to","schema":{"type":"array","items":{"type":"object","properties":{"sdkList":{"type":"string","description":"List of SDK codes associated with credential"}}}}},"404":{"description":"Credential not found"}},"x-code-samples":[{"lang":"shell","source":"curl --request PUT \\\n  --url http://undefinedundefined/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/credentials/%7BintegrationType%7D/%7BcredentialId%7D/services \\\n  --data '[{\"sdkCode\":\"string\",\"licenseConfigs\":[{\"productId\":\"string\",\"id\":\"string\",\"op\":\"string\"}]}]'"},{"lang":"node","source":"var request = require(\"request\");\n\nvar options = {\n  method: 'PUT',\n  url: 'http://undefinedundefined/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/credentials/%7BintegrationType%7D/%7BcredentialId%7D/services',\n  body: [\n    {\n      sdkCode: 'string',\n      licenseConfigs: [{productId: 'string', id: 'string', op: 'string'}]\n    }\n  ],\n  json: true\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"},{"lang":"php","source":"<?php\n\n$request = new HttpRequest();\n$request->setUrl('http://undefinedundefined/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/credentials/%7BintegrationType%7D/%7BcredentialId%7D/services');\n$request->setMethod(HTTP_METH_PUT);\n\n$request->setBody('[{\"sdkCode\":\"string\",\"licenseConfigs\":[{\"productId\":\"string\",\"id\":\"string\",\"op\":\"string\"}]}]');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"},{"lang":"java","source":"HttpResponse<String> response = Unirest.put(\"http://undefinedundefined/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/credentials/%7BintegrationType%7D/%7BcredentialId%7D/services\")\n  .body(\"[{\\\"sdkCode\\\":\\\"string\\\",\\\"licenseConfigs\\\":[{\\\"productId\\\":\\\"string\\\",\\\"id\\\":\\\"string\\\",\\\"op\\\":\\\"string\\\"}]}]\")\n  .asString();"},{"lang":"go","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"http://undefinedundefined/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/credentials/%7BintegrationType%7D/%7BcredentialId%7D/services\"\n\n\tpayload := strings.NewReader(\"[{\\\"sdkCode\\\":\\\"string\\\",\\\"licenseConfigs\\\":[{\\\"productId\\\":\\\"string\\\",\\\"id\\\":\\\"string\\\",\\\"op\\\":\\\"string\\\"}]}]\")\n\n\treq, _ := http.NewRequest(\"PUT\", url, payload)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"python","source":"import http.client\n\nconn = http.client.HTTPConnection(\"undefinedundefined\")\n\npayload = \"[{\\\"sdkCode\\\":\\\"string\\\",\\\"licenseConfigs\\\":[{\\\"productId\\\":\\\"string\\\",\\\"id\\\":\\\"string\\\",\\\"op\\\":\\\"string\\\"}]}]\"\n\nconn.request(\"PUT\", \"/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/credentials/%7BintegrationType%7D/%7BcredentialId%7D/services\", payload)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"csharp","source":"var client = new RestClient(\"http://undefinedundefined/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/credentials/%7BintegrationType%7D/%7BcredentialId%7D/services\");\nvar request = new RestRequest(Method.PUT);\nrequest.AddParameter(\"undefined\", \"[{\\\"sdkCode\\\":\\\"string\\\",\\\"licenseConfigs\\\":[{\\\"productId\\\":\\\"string\\\",\\\"id\\\":\\\"string\\\",\\\"op\\\":\\\"string\\\"}]}]\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"},{"lang":"ruby","source":"require 'uri'\nrequire 'net/http'\n\nurl = URI(\"http://undefinedundefined/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/credentials/%7BintegrationType%7D/%7BcredentialId%7D/services\")\n\nhttp = Net::HTTP.new(url.host, url.port)\n\nrequest = Net::HTTP::Put.new(url)\nrequest.body = \"[{\\\"sdkCode\\\":\\\"string\\\",\\\"licenseConfigs\\\":[{\\\"productId\\\":\\\"string\\\",\\\"id\\\":\\\"string\\\",\\\"op\\\":\\\"string\\\"}]}]\"\n\nresponse = http.request(request)\nputs response.read_body"}]}},"/api/organizations/{orgId}/projects_workspaces/credentials/{credentialId}":{"get":{"summary":"View project/workspace IDs for a credential","tags":["Workspaces"],"parameters":[{"$ref":"#/parameters/orgId"},{"name":"credentialId","description":"Credential ID","in":"path","required":true,"type":"string"},{"$ref":"#/parameters/authorization"},{"$ref":"#/parameters/x-api-key"}],"responses":{"200":{"description":"Project/workspace IDs","schema":{"type":"array","items":{"type":"object","properties":{"projectId":{"type":"string","description":"Project id"},"workspaceId":{"type":"string","description":"Workspace id"},"credentialId":{"type":"string","description":"Credential id"}}}}},"404":{"description":"Credential not found / Project not found"},"500":{"description":"Error retrieving workspace/project info"}},"x-code-samples":[{"lang":"shell","source":"curl --request GET \\\n  --url http://undefinedundefined/api/organizations/%7BorgId%7D/projects_workspaces/credentials/%7BcredentialId%7D"},{"lang":"node","source":"var request = require(\"request\");\n\nvar options = {\n  method: 'GET',\n  url: 'http://undefinedundefined/api/organizations/%7BorgId%7D/projects_workspaces/credentials/%7BcredentialId%7D'\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"},{"lang":"php","source":"<?php\n\n$request = new HttpRequest();\n$request->setUrl('http://undefinedundefined/api/organizations/%7BorgId%7D/projects_workspaces/credentials/%7BcredentialId%7D');\n$request->setMethod(HTTP_METH_GET);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"},{"lang":"java","source":"HttpResponse<String> response = Unirest.get(\"http://undefinedundefined/api/organizations/%7BorgId%7D/projects_workspaces/credentials/%7BcredentialId%7D\")\n  .asString();"},{"lang":"go","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"http://undefinedundefined/api/organizations/%7BorgId%7D/projects_workspaces/credentials/%7BcredentialId%7D\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"python","source":"import http.client\n\nconn = http.client.HTTPConnection(\"undefinedundefined\")\n\nconn.request(\"GET\", \"/api/organizations/%7BorgId%7D/projects_workspaces/credentials/%7BcredentialId%7D\")\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"csharp","source":"var client = new RestClient(\"http://undefinedundefined/api/organizations/%7BorgId%7D/projects_workspaces/credentials/%7BcredentialId%7D\");\nvar request = new RestRequest(Method.GET);\nIRestResponse response = client.Execute(request);"},{"lang":"ruby","source":"require 'uri'\nrequire 'net/http'\n\nurl = URI(\"http://undefinedundefined/api/organizations/%7BorgId%7D/projects_workspaces/credentials/%7BcredentialId%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\n\nrequest = Net::HTTP::Get.new(url)\n\nresponse = http.request(request)\nputs response.read_body"}]}},"/api/organizations/{orgId}/projects_workspaces/workspaces/{workspaceId}":{"get":{"summary":"View project ID for a workspace","tags":["Workspaces"],"parameters":[{"$ref":"#/parameters/orgId"},{"$ref":"#/parameters/workspaceId"},{"$ref":"#/parameters/authorization"},{"$ref":"#/parameters/x-api-key"}],"responses":{"200":{"description":"Project ID","schema":{"type":"array","items":{"type":"object","properties":{"projectId":{"type":"string","description":"Project id"},"workspaceId":{"type":"string","description":"Workspace id"}}}}},"404":{"description":"Project not found"},"500":{"description":"Error retrieving project info"}},"x-code-samples":[{"lang":"shell","source":"curl --request GET \\\n  --url http://undefinedundefined/api/organizations/%7BorgId%7D/projects_workspaces/workspaces/%7BworkspaceId%7D"},{"lang":"node","source":"var request = require(\"request\");\n\nvar options = {\n  method: 'GET',\n  url: 'http://undefinedundefined/api/organizations/%7BorgId%7D/projects_workspaces/workspaces/%7BworkspaceId%7D'\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"},{"lang":"php","source":"<?php\n\n$request = new HttpRequest();\n$request->setUrl('http://undefinedundefined/api/organizations/%7BorgId%7D/projects_workspaces/workspaces/%7BworkspaceId%7D');\n$request->setMethod(HTTP_METH_GET);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"},{"lang":"java","source":"HttpResponse<String> response = Unirest.get(\"http://undefinedundefined/api/organizations/%7BorgId%7D/projects_workspaces/workspaces/%7BworkspaceId%7D\")\n  .asString();"},{"lang":"go","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"http://undefinedundefined/api/organizations/%7BorgId%7D/projects_workspaces/workspaces/%7BworkspaceId%7D\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"python","source":"import http.client\n\nconn = http.client.HTTPConnection(\"undefinedundefined\")\n\nconn.request(\"GET\", \"/api/organizations/%7BorgId%7D/projects_workspaces/workspaces/%7BworkspaceId%7D\")\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"csharp","source":"var client = new RestClient(\"http://undefinedundefined/api/organizations/%7BorgId%7D/projects_workspaces/workspaces/%7BworkspaceId%7D\");\nvar request = new RestRequest(Method.GET);\nIRestResponse response = client.Execute(request);"},{"lang":"ruby","source":"require 'uri'\nrequire 'net/http'\n\nurl = URI(\"http://undefinedundefined/api/organizations/%7BorgId%7D/projects_workspaces/workspaces/%7BworkspaceId%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\n\nrequest = Net::HTTP::Get.new(url)\n\nresponse = http.request(request)\nputs response.read_body"}]}},"/api/organizations/{orgId}/projects/{projectId}/workspaces/{workspaceId}/credentials/{credentialId}":{"delete":{"summary":"Delete a credential","tags":["Workspaces"],"parameters":[{"$ref":"#/parameters/orgId"},{"$ref":"#/parameters/projectId"},{"$ref":"#/parameters/workspaceId"},{"name":"credentialId","description":"ID of credential","in":"path","required":true,"type":"string"},{"$ref":"#/parameters/authorization"},{"$ref":"#/parameters/x-api-key"}],"responses":{"200":{"description":"Delete credentials success"},"500":{"description":"Error deleting credentials"}},"x-code-samples":[{"lang":"shell","source":"curl --request DELETE \\\n  --url http://undefinedundefined/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/credentials/%7BcredentialId%7D"},{"lang":"node","source":"var request = require(\"request\");\n\nvar options = {\n  method: 'DELETE',\n  url: 'http://undefinedundefined/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/credentials/%7BcredentialId%7D'\n};\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"},{"lang":"php","source":"<?php\n\n$request = new HttpRequest();\n$request->setUrl('http://undefinedundefined/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/credentials/%7BcredentialId%7D');\n$request->setMethod(HTTP_METH_DELETE);\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"},{"lang":"java","source":"HttpResponse<String> response = Unirest.delete(\"http://undefinedundefined/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/credentials/%7BcredentialId%7D\")\n  .asString();"},{"lang":"go","source":"package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"http://undefinedundefined/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/credentials/%7BcredentialId%7D\"\n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"},{"lang":"python","source":"import http.client\n\nconn = http.client.HTTPConnection(\"undefinedundefined\")\n\nconn.request(\"DELETE\", \"/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/credentials/%7BcredentialId%7D\")\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"},{"lang":"csharp","source":"var client = new RestClient(\"http://undefinedundefined/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/credentials/%7BcredentialId%7D\");\nvar request = new RestRequest(Method.DELETE);\nIRestResponse response = client.Execute(request);"},{"lang":"ruby","source":"require 'uri'\nrequire 'net/http'\n\nurl = URI(\"http://undefinedundefined/api/organizations/%7BorgId%7D/projects/%7BprojectId%7D/workspaces/%7BworkspaceId%7D/credentials/%7BcredentialId%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\n\nrequest = Net::HTTP::Delete.new(url)\n\nresponse = http.request(request)\nputs response.read_body"}]}}},"parameters":{"orgId":{"name":"orgId","description":"Org ID","in":"path","required":true,"type":"string"},"projectId":{"name":"projectId","description":"Project ID","in":"path","required":true,"type":"string"},"workspaceId":{"name":"workspaceId","description":"Workspace ID","in":"path","required":true,"type":"string"},"appName":{"name":"appName","description":"Application name to be validated","in":"path","required":true,"type":"string"},"appId":{"name":"appId","description":"Application id","in":"path","required":true,"type":"string"},"appType":{"name":"appType","description":"Application type - use JGR","in":"query","required":true,"type":"string"},"authorization":{"name":"Authorization","description":"Access token","in":"header","required":true,"type":"string"},"x-api-key":{"name":"x-api-key","description":"API key","in":"header","required":true,"type":"string"}},"definitions":{"SubscribeToServices":{"type":"array","items":{"type":"object","properties":{"sdkCode":{"type":"string"},"licenseConfigs":{"type":"array","items":{"type":"object","properties":{"productId":{"type":"string"},"id":{"type":"string"},"op":{"type":"string"}}}}}}},"Adobeid":{"type":"object","required":["name","description","platform"],"properties":{"name":{"type":"string"},"description":{"type":"string"},"platform":{"type":"string"},"urlScheme":{"type":"string"},"redirectUriList":{"type":"array","items":{"type":"string"}},"defaultRedirectUri":{"type":"string"},"domain":{"type":"string"},"approvalInfo":{"type":"object","properties":{"websiteUrl":{"type":"string"},"companyWebsiteUrl":{"type":"string"},"integrationWebsiteUrl":{"type":"string"},"contactEmail":{"type":"string"},"integrationDescription":{"type":"string"},"descriptionTypekit":{"type":"string"},"descriptionCCStorage":{"type":"string"},"otherCreativeSDK":{"type":"string"},"domain":{"type":"string"},"sdkComponents":{"type":"array","items":{"type":"string"}},"requestState":{"type":"string"},"requestStateList":{"type":"array","items":{"type":"object","properties":{"rejectReasons":{"type":"string"},"requestState":{"type":"string"},"created":{"type":"string"},"comments":{"type":"string"}}}}}}}},"Entp":{"type":"object","required":["name","description"],"properties":{"name":{"type":"string"},"description":{"type":"string"}}},"roles":{"type":"array","items":{"type":"object","properties":{"id":{"type":"integer"},"code":{"type":"string"},"name":{"type":"string"}}}}}},"seo":null,"gitRemote":{"protocol":"https","resource":"github.com","full_name":"hirenoble/adobeio-console","organization":"hirenoble","name":"adobeio-console","ref":"master"},"pages":[{"importedFileName":"overview","pages":[],"path":"hirenoble/adobeio-console/master/overview.md","title":"Console Overview"},{"importedFileName":"getting-started","pages":[],"path":"hirenoble/adobeio-console/master/getting-started.md","title":"Getting Started"},{"importedFileName":"projects","path":"hirenoble/adobeio-console/master/projects.md","title":"Projects","pages":[{"importedFileName":"projects-empty","pages":[],"path":"hirenoble/adobeio-console/master/projects-empty.md","title":"Create an Empty Project"},{"importedFileName":"projects-template","pages":[],"path":"hirenoble/adobeio-console/master/projects-template.md","title":"Create a Templated Project"},{"importedFileName":"approval","pages":[],"path":"hirenoble/adobeio-console/master/approval.md","title":"Approval Process"}]},{"importedFileName":"plugins","path":"hirenoble/adobeio-console/master/plugin-project.md","title":"Plugins","pages":[{"importedFileName":"plugin-distribution","pages":[],"path":"hirenoble/adobeio-console/master/plugin-distribution.md","title":"Distribute a Plugin"},{"importedFileName":"plugin-update","pages":[],"path":"hirenoble/adobeio-console/master/plugin-update.md","title":"Update a Plugin"}]},{"importedFileName":"services","path":"hirenoble/adobeio-console/master/services.md","title":"Services","pages":[{"importedFileName":"services-add-api-jwt","pages":[],"path":"hirenoble/adobeio-console/master/services-add-api-jwt.md","title":"Add API using Service Account (JWT)"},{"importedFileName":"services-add-api-key","pages":[],"path":"hirenoble/adobeio-console/master/services-add-api-key.md","title":"Add API using API Key"},{"importedFileName":"services-add-api-oauth","pages":[],"path":"hirenoble/adobeio-console/master/services-add-api-oauth.md","title":"Add API using Oauth"},{"importedFileName":"services-add-event","pages":[],"path":"hirenoble/adobeio-console/master/services-add-event.md","title":"Add Events"},{"importedFileName":"services-enable-runtime","pages":[],"path":"hirenoble/adobeio-console/master/services-enable-runtime.md","title":"Enable Runtime"}]},{"importedFileName":"quota","pages":[],"path":"hirenoble/adobeio-console/master/quota.md","title":"Quota usage"},{"importedFileName":"credentials","pages":[],"path":"hirenoble/adobeio-console/master/credentials.md","title":"Credentials"},{"importedFileName":"insights","pages":[],"path":"hirenoble/adobeio-console/master/insights.md","title":"Insights"},{"importedFileName":"downloads","pages":[],"path":"hirenoble/adobeio-console/master/downloads.md","title":"Downloads"},{"importedFileName":"faq","pages":[],"path":"hirenoble/adobeio-console/master/faq.md","title":"FAQ"},{"importedFileName":"support","pages":[],"path":"hirenoble/adobeio-console/master/support.md","title":"Support"}]}},"staticQueryHashes":["63159454"]}